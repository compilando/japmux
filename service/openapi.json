{
  "openapi": "3.0.0",
  "paths": {
    "/api/admin-check": {
      "get": {
        "description": "Endpoint para verificar si el usuario tiene rol de administrador",
        "operationId": "AppController_adminCheck",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Acceso concedido como administrador"
          },
          "401": {
            "description": "No autorizado"
          },
          "403": {
            "description": "Acceso denegado - Se requiere rol de administrador"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Verificar acceso de administrador",
        "tags": [
          "Autenticación y Roles"
        ]
      }
    },
    "/api/tenant-admin-check": {
      "get": {
        "description": "Endpoint para verificar si el usuario tiene rol de administrador de tenant",
        "operationId": "AppController_tenantAdminCheck",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Acceso concedido como administrador de tenant"
          },
          "401": {
            "description": "No autorizado"
          },
          "403": {
            "description": "Acceso denegado - Se requiere rol de administrador de tenant"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Verificar acceso de administrador de tenant",
        "tags": [
          "Autenticación y Roles"
        ]
      }
    },
    "/api/user-check": {
      "get": {
        "description": "Endpoint para verificar si el usuario tiene rol de usuario básico",
        "operationId": "AppController_userCheck",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Acceso concedido como usuario"
          },
          "401": {
            "description": "No autorizado"
          },
          "403": {
            "description": "Acceso denegado - Se requiere rol de usuario"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Verificar acceso de usuario",
        "tags": [
          "Autenticación y Roles"
        ]
      }
    },
    "/api/any-authenticated-check": {
      "get": {
        "description": "Endpoint para verificar si el usuario está autenticado (sin requerir rol específico)",
        "operationId": "AppController_anyAuthenticatedCheck",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Acceso concedido - Usuario autenticado"
          },
          "401": {
            "description": "No autorizado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Verificar autenticación",
        "tags": [
          "Autenticación y Roles"
        ]
      }
    },
    "/api/users": {
      "post": {
        "description": "Creates a new user in the system. For tenant_admins, can optionally specify a tenantId to create the user in that tenant.",
        "operationId": "UserController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data - Check the request body format"
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token"
          },
          "403": {
            "description": "Forbidden - Admin or tenant admin role required"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create new user",
        "tags": [
          "Users"
        ]
      },
      "get": {
        "description": "Retrieves a list of users. For tenant_admins, can optionally specify a tenantId to list users from that tenant.",
        "operationId": "UserController_findAll",
        "parameters": [
          {
            "name": "tenantId",
            "required": false,
            "in": "query",
            "description": "Optional tenant ID to filter users. Only used if the requesting user is a tenant_admin. Can be a UUID or \"default-tenant\"",
            "schema": {
              "pattern": "/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$|^default-tenant$/",
              "type": "string"
            }
          },
          {
            "required": false,
            "description": "Optional tenant ID to filter users. Only used if the requesting user is a tenant_admin. Can be a UUID or \"default-tenant\"",
            "name": "tenantId",
            "in": "query",
            "schema": {
              "pattern": "/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$|^default-tenant$/",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateUserDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token"
          },
          "403": {
            "description": "Forbidden - Admin role required or invalid tenant access"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all users",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/{id}": {
      "get": {
        "description": "Retrieves a specific user by their unique ID. Requires admin privileges.",
        "operationId": "UserController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Unique user identifier (CUID)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token"
          },
          "403": {
            "description": "Forbidden - Admin role required"
          },
          "404": {
            "description": "User not found - The specified ID does not exist"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user by ID",
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "description": "Updates an existing user's information. Requires admin privileges.",
        "operationId": "UserController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Unique user identifier to update (CUID)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "User data to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data - Check the request body format"
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token"
          },
          "403": {
            "description": "Forbidden - Admin role required"
          },
          "404": {
            "description": "User not found - The specified ID does not exist"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update user",
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "description": "Permanently deletes a user from the system. Requires admin privileges.",
        "operationId": "UserController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Unique user identifier to delete (CUID)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token"
          },
          "403": {
            "description": "Forbidden - Admin role required"
          },
          "404": {
            "description": "User not found - The specified ID does not exist"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete user",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/check": {
      "get": {
        "description": "Returns true if a user with the specified email exists, false otherwise",
        "operationId": "UserController_checkUserExists",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User existence check result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "exists": {
                      "type": "boolean",
                      "description": "Whether the user exists or not"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Check if a user exists by email",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/auth/register": {
      "post": {
        "description": "Creates a new user account in the system. This endpoint is publicly accessible.",
        "operationId": "AuthController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data - Check the request body format"
          },
          "409": {
            "description": "Email already exists - The provided email is already registered"
          }
        },
        "summary": "Register new user",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/login": {
      "post": {
        "description": "Authenticates a user and returns a JWT token for subsequent API calls",
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "User credentials for authentication",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful - Returns JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials - Email or password is incorrect"
          }
        },
        "summary": "User login",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/profile": {
      "get": {
        "description": "Retrieves the profile information of the currently authenticated user",
        "operationId": "AuthController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user profile",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/projects/{projectId}/regions": {
      "post": {
        "description": "Creates a new region for the current tenant. Accessible by global admins or tenant admins.",
        "operationId": "RegionController_create",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID of the project",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRegionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Region successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegionDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data - Check the request body format"
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to create regions"
          },
          "409": {
            "description": "Region already exists - A region with this language code already exists for this tenant"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create new region",
        "tags": [
          "Regions"
        ]
      },
      "get": {
        "description": "Retrieves a list of all regions for the current tenant. Results are cached for 1 hour.",
        "operationId": "RegionController_findAll",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID of the project",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of regions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RegionDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token"
          },
          "404": {
            "description": "Project not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all regions",
        "tags": [
          "Regions"
        ]
      }
    },
    "/api/projects/{projectId}/regions/{langCode}": {
      "get": {
        "description": "Retrieves a specific region by its language code (e.g., en-US, es-ES). Results are cached for 1 hour.",
        "operationId": "RegionController_findOne",
        "parameters": [
          {
            "name": "langCode",
            "required": true,
            "in": "path",
            "description": "Language code of the region (e.g., en-US, es-ES)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID of the project",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Region found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegionDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token"
          },
          "404": {
            "description": "Region not found - The specified language code does not exist for this tenant"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get region by language code",
        "tags": [
          "Regions"
        ]
      },
      "patch": {
        "description": "Updates an existing region's information. Accessible by global admins or tenant admins.",
        "operationId": "RegionController_update",
        "parameters": [
          {
            "name": "langCode",
            "required": true,
            "in": "path",
            "description": "Language code of the region to update (e.g., en-US, es-ES)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID of the project",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRegionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Region updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegionDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data - Check the request body format"
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to update regions"
          },
          "404": {
            "description": "Region not found - The specified language code does not exist for this tenant"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update region",
        "tags": [
          "Regions"
        ]
      },
      "delete": {
        "description": "Permanently deletes a region from the system. Accessible by global admins or tenant admins.",
        "operationId": "RegionController_remove",
        "parameters": [
          {
            "name": "langCode",
            "required": true,
            "in": "path",
            "description": "Language code of the region to delete (e.g., en-US, es-ES)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID of the project",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Region deleted successfully"
          },
          "204": {
            "description": ""
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to delete regions"
          },
          "404": {
            "description": "Region not found - The specified language code does not exist for this tenant"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete region",
        "tags": [
          "Regions"
        ]
      }
    },
    "/api/projects/{projectId}/cultural-data": {
      "post": {
        "operationId": "CulturalDataController_create",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCulturalDataDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Cultural data created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CulturalDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "404": {
            "description": "Project or referenced Region not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Creates new cultural data within a project",
        "tags": [
          "Cultural Data"
        ]
      },
      "get": {
        "operationId": "CulturalDataController_findAll",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of cultural data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CulturalDataResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Gets all cultural data for a project",
        "tags": [
          "Cultural Data"
        ]
      }
    },
    "/api/projects/{projectId}/cultural-data/{culturalDataId}": {
      "get": {
        "operationId": "CulturalDataController_findOne",
        "parameters": [
          {
            "name": "culturalDataId",
            "required": true,
            "in": "path",
            "description": "Key of the cultural data (e.g., direct-and-formal)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cultural data found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CulturalDataResponse"
                }
              }
            }
          },
          "404": {
            "description": "Project or Cultural data not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Gets cultural data by ID within a project",
        "tags": [
          "Cultural Data"
        ]
      },
      "patch": {
        "operationId": "CulturalDataController_update",
        "parameters": [
          {
            "name": "culturalDataId",
            "required": true,
            "in": "path",
            "description": "Key of the cultural data to update (e.g., direct-and-formal)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCulturalDataDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cultural data updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CulturalDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "404": {
            "description": "Project or Cultural data not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Updates cultural data by ID within a project",
        "tags": [
          "Cultural Data"
        ]
      },
      "delete": {
        "operationId": "CulturalDataController_remove",
        "parameters": [
          {
            "name": "culturalDataId",
            "required": true,
            "in": "path",
            "description": "Key of the cultural data to delete (e.g., direct-and-formal)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cultural data deleted."
          },
          "404": {
            "description": "Project or Cultural data not found."
          },
          "409": {
            "description": "Conflict on delete (referenced by other entities)."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Deletes cultural data by ID within a project",
        "tags": [
          "Cultural Data"
        ]
      }
    },
    "/api/projects/{projectId}/prompts": {
      "get": {
        "operationId": "PromptController_findAll",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of prompts"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all prompts for a project",
        "tags": [
          "Prompts"
        ]
      },
      "post": {
        "operationId": "PromptController_create",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePromptDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Prompt created successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new prompt",
        "tags": [
          "Prompts"
        ]
      }
    },
    "/api/projects/{projectId}/prompts/{id}": {
      "get": {
        "operationId": "PromptController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Prompt ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Prompt found successfully"
          },
          "404": {
            "description": "Prompt not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a specific prompt by ID",
        "tags": [
          "Prompts"
        ]
      },
      "put": {
        "operationId": "PromptController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Prompt ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromptDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Prompt updated successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a prompt (full update)",
        "tags": [
          "Prompts"
        ]
      },
      "patch": {
        "operationId": "PromptController_partialUpdate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Prompt ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromptDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Prompt updated successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a prompt (partial update)",
        "tags": [
          "Prompts"
        ]
      },
      "delete": {
        "operationId": "PromptController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Prompt ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Prompt deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a prompt",
        "tags": [
          "Prompts"
        ]
      }
    },
    "/api/projects/{projectId}/prompts/generate-structure": {
      "post": {
        "operationId": "PromptController_generateStructure",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneratePromptStructureDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Prompt structure generated successfully"
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Generate a prompt structure from user input",
        "tags": [
          "Prompts"
        ]
      }
    },
    "/api/projects/mine": {
      "get": {
        "description": "Retorna todos los proyectos a los que tiene acceso el usuario autenticado",
        "operationId": "ProjectController_findMine",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Lista de proyectos del usuario",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateProjectDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "No autorizado - Token inválido o expirado"
          },
          "403": {
            "description": "Acceso denegado - Información de tenant no disponible"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Obtener proyectos del usuario actual",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects": {
      "post": {
        "description": "Creates a new project for the current tenant. Accessible by global admins or tenant admins.",
        "operationId": "ProjectController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data - Check the request body format"
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to create projects"
          },
          "409": {
            "description": "Project already exists - A project with this name already exists for this tenant"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create new project",
        "tags": [
          "Projects"
        ]
      },
      "get": {
        "description": "Retrieves a list of all projects for the current tenant. Results are cached for 1 hour.",
        "operationId": "ProjectController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of projects retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Get all projects",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/{id}": {
      "get": {
        "description": "Retrieves a specific project by its unique ID. Results are cached for 1 hour.",
        "operationId": "ProjectController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Unique project identifier (UUID)",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token"
          },
          "404": {
            "description": "Project not found - The specified ID does not exist for this tenant"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get project by ID",
        "tags": [
          "Projects"
        ]
      },
      "patch": {
        "description": "Updates an existing project by ID.",
        "operationId": "ProjectController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token"
          },
          "404": {
            "description": "Project not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update project",
        "tags": [
          "Projects"
        ]
      },
      "delete": {
        "description": "Deletes a project by ID.",
        "operationId": "ProjectController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "204": {
            "description": "Project deleted successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token"
          },
          "404": {
            "description": "Project not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete project",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/system-prompts": {
      "post": {
        "operationId": "SystemPromptController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSystemPromptDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "System prompt created successfully."
          },
          "400": {
            "description": "Invalid input data."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "Conflict: Name already exists."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new system prompt (Admin Only)",
        "tags": [
          "System Prompts"
        ]
      },
      "get": {
        "operationId": "SystemPromptController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of system prompts."
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all system prompts",
        "tags": [
          "System Prompts"
        ]
      }
    },
    "/api/system-prompts/{name}": {
      "get": {
        "operationId": "SystemPromptController_findOne",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "description": "Unique name of the system prompt",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "System prompt details."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "System prompt not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a specific system prompt by name",
        "tags": [
          "System Prompts"
        ]
      },
      "patch": {
        "operationId": "SystemPromptController_update",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "description": "Unique name of the system prompt to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSystemPromptDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "System prompt updated successfully."
          },
          "400": {
            "description": "Invalid input data."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "System prompt not found or conflict with new name."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update an existing system prompt (Admin Only)",
        "tags": [
          "System Prompts"
        ]
      },
      "delete": {
        "operationId": "SystemPromptController_remove",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "description": "Unique name of the system prompt to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "System prompt deleted successfully."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "System prompt not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a system prompt (Admin Only)",
        "tags": [
          "System Prompts"
        ]
      }
    },
    "/api/execute-raw": {
      "post": {
        "operationId": "RawExecutionController_executeRawText",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecuteRawDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Execution successful, response from AI model.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data or unsupported provider."
          },
          "404": {
            "description": "SystemPrompt or AIModel not found."
          },
          "500": {
            "description": "Internal server error (API Key config, LLM execution failed)."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Executes raw text using a specified System Prompt and AI Model ID.",
        "tags": [
          "Raw Execution"
        ]
      }
    },
    "/api/tenants": {
      "post": {
        "description": "Creates a new tenant in the system. This operation requires admin or tenant admin privileges.",
        "operationId": "TenantController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTenantDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tenant successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data - Check the request body format"
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token"
          },
          "403": {
            "description": "Forbidden - Admin or tenant admin role required"
          },
          "409": {
            "description": "Tenant name already exists - The provided name is already in use"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create new tenant",
        "tags": [
          "Tenants"
        ]
      },
      "get": {
        "description": "Retrieves a list of all tenants in the system. This operation requires admin or tenant admin privileges.",
        "operationId": "TenantController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of tenants retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token"
          },
          "403": {
            "description": "Forbidden - Admin or tenant admin role required"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all tenants",
        "tags": [
          "Tenants"
        ]
      }
    },
    "/api/tenants/{tenantId}": {
      "get": {
        "description": "Retrieves a specific tenant by their unique ID. Accessible by admins or tenant admins.",
        "operationId": "TenantController_findOne",
        "parameters": [
          {
            "name": "tenantId",
            "required": true,
            "in": "path",
            "description": "Unique tenant identifier (UUID or \"default-tenant\")",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token"
          },
          "403": {
            "description": "Forbidden - Admin or tenant admin role required"
          },
          "404": {
            "description": "Tenant not found - The specified ID does not exist"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get tenant by ID",
        "tags": [
          "Tenants"
        ]
      },
      "patch": {
        "description": "Updates an existing tenant's information. Accessible by global admins or tenant admins.",
        "operationId": "TenantController_update",
        "parameters": [
          {
            "name": "tenantId",
            "required": true,
            "in": "path",
            "description": "Unique tenant identifier to update (UUID)",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTenantDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tenant updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data - Check the request body format"
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token"
          },
          "403": {
            "description": "Forbidden - Admin or tenant admin role required"
          },
          "404": {
            "description": "Tenant not found - The specified ID does not exist"
          },
          "409": {
            "description": "Tenant name already exists - The provided name is already in use"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update tenant",
        "tags": [
          "Tenants"
        ]
      },
      "delete": {
        "description": "Permanently deletes a tenant from the system. Accessible by global admins or tenant admins.",
        "operationId": "TenantController_remove",
        "parameters": [
          {
            "name": "tenantId",
            "required": true,
            "in": "path",
            "description": "Unique tenant identifier to delete (UUID)",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token"
          },
          "403": {
            "description": "Forbidden - Admin or tenant admin role required"
          },
          "404": {
            "description": "Tenant not found - The specified ID does not exist"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete tenant",
        "tags": [
          "Tenants"
        ]
      }
    },
    "/api/projects/{projectId}/tags": {
      "post": {
        "operationId": "TagController_create",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTagDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Etiqueta creada.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagDto"
                }
              }
            }
          },
          "400": {
            "description": "Datos inválidos."
          },
          "404": {
            "description": "Proyecto no encontrado."
          },
          "409": {
            "description": "Conflicto, ya existe una etiqueta con ese nombre en el proyecto."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Crea una nueva etiqueta para un proyecto",
        "tags": [
          "Tags"
        ]
      },
      "get": {
        "operationId": "TagController_findAll",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de etiquetas.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Proyecto no encontrado."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obtiene todas las etiquetas de un proyecto",
        "tags": [
          "Tags"
        ]
      }
    },
    "/api/projects/{projectId}/tags/{tagId}": {
      "get": {
        "operationId": "TagController_findOne",
        "parameters": [
          {
            "name": "tagId",
            "required": true,
            "in": "path",
            "description": "ID único de la etiqueta (CUID)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Etiqueta encontrada.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagDto"
                }
              }
            }
          },
          "404": {
            "description": "Proyecto o Etiqueta no encontrada."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obtiene una etiqueta por su ID dentro de un proyecto",
        "tags": [
          "Tags"
        ]
      },
      "patch": {
        "operationId": "TagController_update",
        "parameters": [
          {
            "name": "tagId",
            "required": true,
            "in": "path",
            "description": "ID único de la etiqueta a actualizar (CUID)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTagDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Etiqueta actualizada.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagDto"
                }
              }
            }
          },
          "400": {
            "description": "Datos inválidos."
          },
          "404": {
            "description": "Proyecto o Etiqueta no encontrada."
          },
          "409": {
            "description": "Conflicto, ya existe una etiqueta con el nuevo nombre en el proyecto."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Actualiza una etiqueta existente en un proyecto",
        "tags": [
          "Tags"
        ]
      },
      "delete": {
        "operationId": "TagController_remove",
        "parameters": [
          {
            "name": "tagId",
            "required": true,
            "in": "path",
            "description": "ID único de la etiqueta a eliminar (CUID)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Etiqueta eliminada.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagDto"
                }
              }
            }
          },
          "404": {
            "description": "Proyecto o Etiqueta no encontrada."
          },
          "409": {
            "description": "Conflicto, la etiqueta está en uso."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Elimina una etiqueta de un proyecto",
        "tags": [
          "Tags"
        ]
      }
    },
    "/api/projects/{projectId}/tags/by-name/{name}": {
      "get": {
        "operationId": "TagController_findByName",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "description": "Nombre único de la etiqueta en el proyecto",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Etiqueta encontrada.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagDto"
                }
              }
            }
          },
          "404": {
            "description": "Proyecto o Etiqueta no encontrada."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obtiene una etiqueta por su nombre dentro de un proyecto",
        "tags": [
          "Tags"
        ]
      }
    },
    "/api/projects/{projectId}/environments": {
      "post": {
        "operationId": "EnvironmentController_create",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEnvironmentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Environment created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEnvironmentDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "404": {
            "description": "Project not found."
          },
          "409": {
            "description": "Conflict, an environment with this name already exists in the project."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Creates a new environment for a project",
        "tags": [
          "Environments"
        ]
      },
      "get": {
        "operationId": "EnvironmentController_findAll",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of environments.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateEnvironmentDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Gets all environments for a project",
        "tags": [
          "Environments"
        ]
      }
    },
    "/api/projects/{projectId}/environments/{environmentId}": {
      "get": {
        "operationId": "EnvironmentController_findOne",
        "parameters": [
          {
            "name": "environmentId",
            "required": true,
            "in": "path",
            "description": "Unique environment ID (CUID)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Environment found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEnvironmentDto"
                }
              }
            }
          },
          "404": {
            "description": "Project or Environment not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Gets an environment by its ID within a project",
        "tags": [
          "Environments"
        ]
      },
      "patch": {
        "operationId": "EnvironmentController_update",
        "parameters": [
          {
            "name": "environmentId",
            "required": true,
            "in": "path",
            "description": "Unique ID of the environment to update (CUID)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEnvironmentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Environment updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEnvironmentDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "404": {
            "description": "Project or Environment not found."
          },
          "409": {
            "description": "Conflict, an environment with the new name already exists in the project."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Updates an existing environment in a project",
        "tags": [
          "Environments"
        ]
      },
      "delete": {
        "operationId": "EnvironmentController_remove",
        "parameters": [
          {
            "name": "environmentId",
            "required": true,
            "in": "path",
            "description": "Unique ID of the environment to delete (CUID)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Environment deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEnvironmentDto"
                }
              }
            }
          },
          "404": {
            "description": "Project or Environment not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Deletes an environment from a project",
        "tags": [
          "Environments"
        ]
      }
    },
    "/api/projects/{projectId}/environments/by-name/{name}": {
      "get": {
        "operationId": "EnvironmentController_findByName",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "description": "Unique environment name in the project",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Environment found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEnvironmentDto"
                }
              }
            }
          },
          "404": {
            "description": "Project or Environment not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Gets an environment by its name within a project",
        "tags": [
          "Environments"
        ]
      }
    },
    "/api/projects/{projectId}/prompts/{promptId}/assets": {
      "post": {
        "operationId": "PromptAssetController_create",
        "parameters": [
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "ID (slug) del prompt padre",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto al que pertenece el prompt",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePromptAssetDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Asset creado con su versión inicial."
          },
          "400": {
            "description": "Datos inválidos."
          },
          "404": {
            "description": "Proyecto o Prompt no encontrado."
          },
          "409": {
            "description": "Conflicto, ya existe un asset con esa key en el prompt."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Crea un nuevo prompt asset (y su primera versión) para un prompt específico",
        "tags": [
          "Prompt Assets (for a specific Prompt)"
        ]
      },
      "get": {
        "operationId": "PromptAssetController_findAll",
        "parameters": [
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "ID (slug) del prompt padre",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto al que pertenece el prompt",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de assets."
          },
          "404": {
            "description": "Proyecto o Prompt no encontrado."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obtiene todos los prompt assets de un prompt específico",
        "tags": [
          "Prompt Assets (for a specific Prompt)"
        ]
      }
    },
    "/api/projects/{projectId}/prompts/{promptId}/assets/{assetKey}": {
      "get": {
        "operationId": "PromptAssetController_findOne",
        "parameters": [
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "ID (slug) del prompt padre",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Key única del asset dentro del prompt",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Asset encontrado con detalles."
          },
          "404": {
            "description": "Proyecto o Asset no encontrado."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obtiene un prompt asset por su key dentro de un prompt específico",
        "tags": [
          "Prompt Assets (for a specific Prompt)"
        ]
      },
      "patch": {
        "operationId": "PromptAssetController_update",
        "parameters": [
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "ID (slug) del prompt padre",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Key única del asset a actualizar",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromptAssetDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Asset actualizado."
          },
          "400": {
            "description": "Datos inválidos."
          },
          "404": {
            "description": "Proyecto o Asset no encontrado."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Actualiza metadatos de un prompt asset (nombre, descripción, etc.) dentro de un prompt",
        "tags": [
          "Prompt Assets (for a specific Prompt)"
        ]
      },
      "delete": {
        "operationId": "PromptAssetController_remove",
        "parameters": [
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "ID (slug) del prompt padre",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Key única del asset a eliminar",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Asset eliminado."
          },
          "404": {
            "description": "Proyecto o Asset no encontrado."
          },
          "409": {
            "description": "Conflicto al eliminar (revisar relaciones sin Cascade)."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Elimina un prompt asset (y sus versiones/traducciones por Cascade) dentro de un prompt",
        "tags": [
          "Prompt Assets (for a specific Prompt)"
        ]
      }
    },
    "/api/projects/{projectId}/rag-document-metadata": {
      "post": {
        "operationId": "RagDocumentMetadataController_create",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRagDocumentMetadataDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Metadatos creados.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RagDocumentMetadataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Datos inválidos."
          },
          "404": {
            "description": "Proyecto o Región referenciada no encontrada."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Crear metadatos para un documento RAG dentro de un proyecto",
        "tags": [
          "RAG Document Metadata"
        ]
      },
      "get": {
        "operationId": "RagDocumentMetadataController_findAll",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de metadatos.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RagDocumentMetadataResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Proyecto no encontrado."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obtener todos los metadatos de documentos RAG de un proyecto",
        "tags": [
          "RAG Document Metadata"
        ]
      }
    },
    "/api/projects/{projectId}/rag-document-metadata/{metadataId}": {
      "get": {
        "operationId": "RagDocumentMetadataController_findOne",
        "parameters": [
          {
            "name": "metadataId",
            "required": true,
            "in": "path",
            "description": "ID de los metadatos (CUID)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metadatos encontrados.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RagDocumentMetadataResponse"
                }
              }
            }
          },
          "404": {
            "description": "Proyecto o Metadatos no encontrados."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obtener metadatos por ID dentro de un proyecto",
        "tags": [
          "RAG Document Metadata"
        ]
      },
      "patch": {
        "operationId": "RagDocumentMetadataController_update",
        "parameters": [
          {
            "name": "metadataId",
            "required": true,
            "in": "path",
            "description": "ID a actualizar",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRagDocumentMetadataDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Metadatos actualizados.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RagDocumentMetadataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Datos inválidos."
          },
          "404": {
            "description": "Proyecto, Metadatos o Región referenciada no encontrada."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Actualizar metadatos por ID dentro de un proyecto",
        "tags": [
          "RAG Document Metadata"
        ]
      },
      "delete": {
        "operationId": "RagDocumentMetadataController_remove",
        "parameters": [
          {
            "name": "metadataId",
            "required": true,
            "in": "path",
            "description": "ID a eliminar",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metadatos eliminados."
          },
          "404": {
            "description": "Proyecto o Metadatos no encontrados."
          },
          "409": {
            "description": "Conflicto al eliminar (referenciado por otras entidades)."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Eliminar metadatos por ID dentro de un proyecto",
        "tags": [
          "RAG Document Metadata"
        ]
      }
    },
    "/health": {
      "get": {
        "operationId": "HealthController_check",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Health"
        ]
      }
    },
    "/api/serve-prompt/execute/{projectId}/{promptName}/{versionTag}/base": {
      "post": {
        "operationId": "ServePromptController_executePromptWithoutLanguage",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptName",
            "required": true,
            "in": "path",
            "description": "The unique name of the prompt within the project",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Specific version tag (e.g., \"v1.2.0\") or \"latest\" to use the most recent version",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Input variables for the prompt",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecutePromptBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Processed prompt text ready for execution and metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "processedPrompt": "string",
                    "metadata": {}
                  }
                }
              }
            }
          },
          "201": {
            "description": ""
          },
          "400": {
            "description": "Invalid parameters or failed template rendering."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Prompt, or Version not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Assembles and prepares a specific prompt version (base language) for execution with provided variables",
        "tags": [
          "Serve Prompt"
        ]
      }
    },
    "/api/serve-prompt/execute/{projectId}/{promptName}/{versionTag}/lang/{languageCode}": {
      "post": {
        "operationId": "ServePromptController_executePromptWithLanguage",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptName",
            "required": true,
            "in": "path",
            "description": "The unique name of the prompt within the project",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Specific version tag (e.g., \"v1.2.0\") or \"latest\" to use the most recent version",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languageCode",
            "required": true,
            "in": "path",
            "description": "Language code for translation (e.g., \"es\")",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Input variables for the prompt",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecutePromptBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Processed prompt text ready for execution and metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "processedPrompt": "string",
                    "metadata": {}
                  }
                }
              }
            }
          },
          "201": {
            "description": ""
          },
          "400": {
            "description": "Invalid parameters or failed template rendering."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Prompt, or Version not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Assembles and prepares a specific prompt version (specific language) for execution with provided variables",
        "tags": [
          "Serve Prompt"
        ]
      }
    },
    "/api/projects/{projectId}/aimodels": {
      "post": {
        "operationId": "AiModelController_create",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAiModelDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The AI model has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AiModelResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "409": {
            "description": "Conflict. AIModel with this name already exists."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new AI model for this project",
        "tags": [
          "AI Models (Project Specific)"
        ]
      },
      "get": {
        "operationId": "AiModelController_findAll",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of project-specific and global AI models.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AiModelResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all AI models for this project (includes global models)",
        "tags": [
          "AI Models (Project Specific)"
        ]
      }
    },
    "/api/projects/{projectId}/aimodels/{aiModelId}": {
      "get": {
        "operationId": "AiModelController_findOne",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "aiModelId",
            "required": true,
            "in": "path",
            "description": "AI Model CUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The found AI model record",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AiModelResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "AI Model not found or not accessible for this project."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a specific AI model by ID (must belong to project or be global)",
        "tags": [
          "AI Models (Project Specific)"
        ]
      },
      "patch": {
        "operationId": "AiModelController_update",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "aiModelId",
            "required": true,
            "in": "path",
            "description": "AI Model CUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAiModelDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The AI model has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AiModelResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "AI Model not found."
          },
          "409": {
            "description": "Conflict. AIModel with this name already exists."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update an AI model by ID (must belong to project)",
        "tags": [
          "AI Models (Project Specific)"
        ]
      },
      "delete": {
        "operationId": "AiModelController_remove",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "aiModelId",
            "required": true,
            "in": "path",
            "description": "AI Model CUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The AI model has been successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AiModelResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "AI Model not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete an AI model by ID (must belong to project)",
        "tags": [
          "AI Models (Project Specific)"
        ]
      }
    },
    "/api/projects/{projectId}/aimodels/providers/types": {
      "get": {
        "operationId": "AiModelController_getProviderTypes",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "The ID of the project (used for context/authorization, though the list is global)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Langchain provider types.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "List available Langchain provider types",
        "tags": [
          "AI Models (Project Specific)"
        ]
      }
    },
    "/api/projects/{projectId}/prompts/{promptId}/versions": {
      "post": {
        "operationId": "PromptVersionController_create",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "Prompt CUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePromptVersionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Version created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptVersionDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data (e.g., duplicate versionTag)."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project or Prompt not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new version for a specific prompt within a project",
        "tags": [
          "Prompt Versions (within Project/Prompt)"
        ]
      },
      "get": {
        "operationId": "PromptVersionController_findAll",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "Prompt CUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of versions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreatePromptVersionDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project or Prompt not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all versions for a specific prompt within a project",
        "tags": [
          "Prompt Versions (within Project/Prompt)"
        ]
      }
    },
    "/api/projects/{projectId}/prompts/{promptId}/versions/{versionTag}": {
      "get": {
        "operationId": "PromptVersionController_findOneByTag",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "Prompt CUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version tag (e.g., 1.0.0) or \"latest\" to get the most recent version",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resolveAssets",
            "required": false,
            "in": "query",
            "description": "Whether to resolve asset placeholders. Defaults to false.",
            "schema": {
              "example": "true",
              "type": "boolean"
            }
          },
          {
            "name": "environmentId",
            "required": false,
            "in": "query",
            "description": "Environment ID for context.",
            "schema": {
              "example": "dev-env-123",
              "type": "string"
            }
          },
          {
            "name": "regionCode",
            "required": false,
            "in": "query",
            "description": "Region code for context (e.g., for asset translations).",
            "schema": {
              "example": "us-east-1",
              "type": "string"
            }
          },
          {
            "name": "variables",
            "required": false,
            "in": "query",
            "description": "JSON stringified object of variables for substitution.",
            "schema": {
              "example": "{\"varName\": \"value\"}",
              "type": "string"
            }
          },
          {
            "name": "processed",
            "required": false,
            "in": "query",
            "description": "Whether to return the processed prompt with all references and variables resolved. Defaults to false.",
            "schema": {
              "example": "true",
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Version found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptVersionDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Prompt, or Version not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a specific prompt version by its tag within a project/prompt. Allows resolving assets.",
        "tags": [
          "Prompt Versions (within Project/Prompt)"
        ]
      },
      "patch": {
        "operationId": "PromptVersionController_update",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "Prompt CUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version tag to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromptVersionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Version updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptVersionDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Prompt, or Version not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a specific prompt version by its tag within a project/prompt",
        "tags": [
          "Prompt Versions (within Project/Prompt)"
        ]
      },
      "delete": {
        "operationId": "PromptVersionController_remove",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "Prompt CUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version tag to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Version deleted."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Prompt, or Version not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a specific prompt version by its tag within a project/prompt",
        "tags": [
          "Prompt Versions (within Project/Prompt)"
        ]
      }
    },
    "/api/projects/{projectId}/prompts/{promptId}/versions/{versionTag}/request-publish": {
      "post": {
        "operationId": "PromptVersionController_requestPublish",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "Prompt ID (slug)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version tag",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Publish request processed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptVersionDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Resource not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Request to publish a prompt version to the marketplace",
        "tags": [
          "Prompt Versions (within Project/Prompt)"
        ]
      }
    },
    "/api/projects/{projectId}/prompts/{promptId}/versions/{versionTag}/unpublish": {
      "post": {
        "operationId": "PromptVersionController_unpublish",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "Prompt ID (slug)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version tag",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Version unpublished.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptVersionDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Resource not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Unpublish a prompt version from the marketplace",
        "tags": [
          "Prompt Versions (within Project/Prompt)"
        ]
      }
    },
    "/api/projects/{projectId}/prompts/{promptId}/versions/{versionTag}/translations": {
      "post": {
        "operationId": "PromptTranslationController_create",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "Prompt CUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version Tag (e.g., 1.0.0) or \"latest\" to get the most recent version",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePromptTranslationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Translation created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptTranslationDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data (e.g., missing languageCode)."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Prompt, or Version not found."
          },
          "409": {
            "description": "Translation for this language already exists for this version."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a translation for a specific prompt version within a project",
        "tags": [
          "Prompt Translations (within Project/Prompt/Version)"
        ]
      },
      "get": {
        "operationId": "PromptTranslationController_findAll",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "Prompt CUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version Tag (e.g., 1.0.0) or \"latest\" to get the most recent version",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of translations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreatePromptTranslationDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Prompt, or Version not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all translations for a specific prompt version within a project",
        "tags": [
          "Prompt Translations (within Project/Prompt/Version)"
        ]
      }
    },
    "/api/projects/{projectId}/prompts/{promptId}/versions/{versionTag}/translations/{languageCode}": {
      "get": {
        "operationId": "PromptTranslationController_findOneByLanguage",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "Prompt CUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version Tag (e.g., 1.0.0) or \"latest\" to get the most recent version",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languageCode",
            "required": true,
            "in": "path",
            "description": "Language code (e.g., es-ES)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resolveAssets",
            "required": false,
            "in": "query",
            "description": "Whether to resolve asset placeholders. Defaults to false.",
            "schema": {
              "example": "true",
              "type": "boolean"
            }
          },
          {
            "name": "environmentId",
            "required": false,
            "in": "query",
            "description": "Environment ID for context.",
            "schema": {
              "example": "dev-env-123",
              "type": "string"
            }
          },
          {
            "name": "regionCode",
            "required": false,
            "in": "query",
            "description": "Region code for context (e.g., for asset translations - overrides languageCode for assets if provided).",
            "schema": {
              "example": "us-east-1",
              "type": "string"
            }
          },
          {
            "name": "variables",
            "required": false,
            "in": "query",
            "description": "JSON stringified object of variables for substitution.",
            "schema": {
              "example": "{\"varName\": \"value\"}",
              "type": "string"
            }
          },
          {
            "name": "processed",
            "required": false,
            "in": "query",
            "description": "Whether to return the processed prompt with all references and variables resolved. Defaults to false.",
            "schema": {
              "example": "true",
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Translation found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptTranslationDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Prompt, Version, or Translation not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a specific translation by language code for a prompt version. Allows resolving assets.",
        "tags": [
          "Prompt Translations (within Project/Prompt/Version)"
        ]
      },
      "patch": {
        "operationId": "PromptTranslationController_update",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "Prompt CUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version Tag (e.g., 1.0.0) or \"latest\" to get the most recent version",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languageCode",
            "required": true,
            "in": "path",
            "description": "Language code of the translation to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromptTranslationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Translation updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptTranslationDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Prompt, Version, or Translation not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a specific translation by language code for a prompt version",
        "tags": [
          "Prompt Translations (within Project/Prompt/Version)"
        ]
      },
      "delete": {
        "operationId": "PromptTranslationController_remove",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "Prompt CUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version Tag (e.g., 1.0.0) or \"latest\" to get the most recent version",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languageCode",
            "required": true,
            "in": "path",
            "description": "Language code of the translation to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Translation deleted."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Prompt, Version, or Translation not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a specific translation by language code for a prompt version",
        "tags": [
          "Prompt Translations (within Project/Prompt/Version)"
        ]
      }
    },
    "/api/projects/{projectId}/prompts/{promptId}/assets/{assetKey}/versions": {
      "post": {
        "operationId": "PromptAssetVersionController_create",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID of the Project the Prompt belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "ID (slug) of the Prompt",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Key of the PromptAsset",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePromptAssetVersionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Version created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptAssetVersionDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data (e.g., duplicate versionTag)."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project or Asset not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new version for a specific prompt asset",
        "tags": [
          "PromptAssetVersions"
        ]
      },
      "get": {
        "operationId": "PromptAssetVersionController_findAll",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID of the Project the Prompt belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "ID (slug) of the Prompt",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Key of the PromptAsset",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languageCode",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of versions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreatePromptAssetVersionDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project or Asset not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all versions for a specific prompt asset",
        "tags": [
          "PromptAssetVersions"
        ]
      }
    },
    "/api/projects/{projectId}/prompts/{promptId}/assets/{assetKey}/versions/{versionTag}": {
      "get": {
        "operationId": "PromptAssetVersionController_findOneByTag",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID of the Project the Prompt belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "ID (slug) of the Prompt",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Key of the PromptAsset",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version tag (e.g., 1.0.0)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languageCode",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Version found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptAssetVersionDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Asset, or Version not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a specific prompt asset version by its tag",
        "tags": [
          "PromptAssetVersions"
        ]
      },
      "patch": {
        "operationId": "PromptAssetVersionController_update",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID of the Project the Prompt belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "ID (slug) of the Prompt",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Key of the PromptAsset",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version tag to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromptAssetVersionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Version updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptAssetVersionDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Asset, or Version not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a specific prompt asset version by its tag",
        "tags": [
          "PromptAssetVersions"
        ]
      },
      "delete": {
        "operationId": "PromptAssetVersionController_remove",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID of the Project the Prompt belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "ID (slug) of the Prompt",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Key of the PromptAsset",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version tag to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Version deleted."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Asset, or Version not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a specific prompt asset version by its tag",
        "tags": [
          "PromptAssetVersions"
        ]
      }
    },
    "/api/projects/{projectId}/prompts/{promptId}/assets/{assetKey}/versions/{versionTag}/publish": {
      "post": {
        "operationId": "PromptAssetVersionController_requestPublish",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID of the Project the Prompt belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "ID (slug) of the Prompt",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Key of the PromptAsset",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version tag to publish",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Publish request submitted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptAssetVersionDto"
                }
              }
            }
          },
          "201": {
            "description": ""
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Asset, or Version not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Request to publish a specific prompt asset version",
        "tags": [
          "PromptAssetVersions"
        ]
      }
    },
    "/api/projects/{projectId}/prompts/{promptId}/assets/{assetKey}/versions/{versionTag}/unpublish": {
      "post": {
        "operationId": "PromptAssetVersionController_unpublish",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID of the Project the Prompt belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "ID (slug) of the Prompt",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Key of the PromptAsset",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version tag to unpublish",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Version unpublished.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptAssetVersionDto"
                }
              }
            }
          },
          "201": {
            "description": ""
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Asset, or Version not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Unpublish a specific prompt asset version",
        "tags": [
          "PromptAssetVersions"
        ]
      }
    },
    "/api/projects/{projectId}/prompts/{promptId}/assets/{assetKey}/versions/{versionTag}/translations": {
      "post": {
        "operationId": "AssetTranslationController_create",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID of the Project the Prompt belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "ID (slug) of the Prompt",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Key of the PromptAsset",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Tag of the PromptAssetVersion",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssetTranslationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Translation created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAssetTranslationDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Asset, or Version not found."
          },
          "409": {
            "description": "Translation for this language already exists for this version."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a translation for a specific asset version",
        "tags": [
          "Asset Translations (Project > Prompt > Asset > Version > Translation)"
        ]
      },
      "get": {
        "operationId": "AssetTranslationController_findAll",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID of the Project the Prompt belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "ID (slug) of the Prompt",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Key of the PromptAsset",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Tag of the PromptAssetVersion",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of translations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateAssetTranslationDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Asset, or Version not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all translations for a specific asset version",
        "tags": [
          "Asset Translations (Project > Prompt > Asset > Version > Translation)"
        ]
      }
    },
    "/api/projects/{projectId}/prompts/{promptId}/assets/{assetKey}/versions/{versionTag}/translations/{languageCode}": {
      "get": {
        "operationId": "AssetTranslationController_findOneByLanguage",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID of the Project the Prompt belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "ID (slug) of the Prompt",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Key of the PromptAsset",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Tag of the PromptAssetVersion",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languageCode",
            "required": true,
            "in": "path",
            "description": "Language code (e.g., es-ES)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Translation found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAssetTranslationDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Asset, Version, or Translation not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a specific translation by language code for an asset version",
        "tags": [
          "Asset Translations (Project > Prompt > Asset > Version > Translation)"
        ]
      },
      "patch": {
        "operationId": "AssetTranslationController_update",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID of the Project the Prompt belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "ID (slug) of the Prompt",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Key of the PromptAsset",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Tag of the PromptAssetVersion",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languageCode",
            "required": true,
            "in": "path",
            "description": "Language code of the translation to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssetTranslationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Translation updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAssetTranslationDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Asset, Version, or Translation not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a specific translation by language code for an asset version",
        "tags": [
          "Asset Translations (Project > Prompt > Asset > Version > Translation)"
        ]
      },
      "delete": {
        "operationId": "AssetTranslationController_remove",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID of the Project the Prompt belongs to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "ID (slug) of the Prompt",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Key of the PromptAsset",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Tag of the PromptAssetVersion",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languageCode",
            "required": true,
            "in": "path",
            "description": "Language code of the translation to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Translation deleted."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Asset, Version, or Translation not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a specific translation by language code for an asset version",
        "tags": [
          "Asset Translations (Project > Prompt > Asset > Version > Translation)"
        ]
      }
    },
    "/api/llm-execution/execute": {
      "post": {
        "operationId": "LlmExecutionController_executeLlm",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecuteLlmDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "LLM execution successful",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "result": "LLM response text",
                    "modelUsed": "gpt-4o",
                    "providerUsed": "openai"
                  }
                }
              }
            }
          },
          "201": {
            "description": ""
          },
          "400": {
            "description": "Invalid request body or unsupported provider."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "AI Model not found."
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded."
          },
          "500": {
            "description": "Internal server error (API Key config, LLM call failed, etc.)."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Executes a pre-assembled prompt using a specified AI Model via LangChain",
        "tags": [
          "LLM Execution"
        ]
      }
    },
    "/api/marketplace/prompts": {
      "get": {
        "description": "Retrieves a paginated list of published prompts for the current tenant. Results can be filtered, sorted and searched.",
        "operationId": "MarketplaceController_getPublishedPrompts",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter prompts by name or description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (starts at 1)",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "default": 10,
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by (e.g. name, createdAt)",
            "schema": {
              "default": "createdAt",
              "example": "createdAt",
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order direction",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "languageCode",
            "required": false,
            "in": "query",
            "description": "Language code to filter prompts (e.g., en-US, es-ES)",
            "schema": {
              "example": "en-US",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of published prompts retrieved successfully"
          },
          "400": {
            "description": "Invalid query parameters - Check the provided values"
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get published prompts",
        "tags": [
          "Marketplace"
        ]
      }
    },
    "/api/marketplace/assets": {
      "get": {
        "description": "Retrieves a paginated list of published assets for the current tenant. Results can be filtered, sorted and searched.",
        "operationId": "MarketplaceController_getPublishedAssets",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter assets by name or description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (starts at 1)",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "default": 10,
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by (e.g. name, createdAt)",
            "schema": {
              "default": "createdAt",
              "example": "createdAt",
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order direction",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "languageCode",
            "required": false,
            "in": "query",
            "description": "Language code to filter assets (e.g., en-US, es-ES)",
            "schema": {
              "example": "en-US",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of published assets retrieved successfully"
          },
          "400": {
            "description": "Invalid query parameters - Check the provided values"
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get published assets",
        "tags": [
          "Marketplace"
        ]
      }
    },
    "/api/dashboard/stats": {
      "get": {
        "operationId": "DashboardController_getStats",
        "parameters": [
          {
            "name": "projectId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Estadísticas obtenidas exitosamente",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardStatsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obtener estadísticas del dashboard",
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/api/dashboard/recent-activity": {
      "get": {
        "operationId": "DashboardController_getRecentActivity",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityType",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "PROMPT",
                "PROMPT_VERSION",
                "PROMPT_TRANSLATION",
                "PROMPT_ASSET",
                "PROMPT_ASSET_VERSION",
                "ASSET_TRANSLATION",
                "PROJECT",
                "ENVIRONMENT",
                "AI_MODEL",
                "TAG",
                "REGION",
                "CULTURAL_DATA",
                "RAG_DOCUMENT"
              ],
              "type": "string"
            }
          },
          {
            "name": "action",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "CREATE",
                "UPDATE",
                "DELETE",
                "PUBLISH",
                "UNPUBLISH",
                "APPROVE",
                "REJECT"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Actividad reciente obtenida exitosamente",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RecentActivityDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obtener actividad reciente",
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/api/dashboard/activity": {
      "get": {
        "operationId": "DashboardController_getActivity",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityType",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "PROMPT",
                "PROMPT_VERSION",
                "PROMPT_TRANSLATION",
                "PROMPT_ASSET",
                "PROMPT_ASSET_VERSION",
                "ASSET_TRANSLATION",
                "PROJECT",
                "ENVIRONMENT",
                "AI_MODEL",
                "TAG",
                "REGION",
                "CULTURAL_DATA",
                "RAG_DOCUMENT"
              ],
              "type": "string"
            }
          },
          {
            "name": "action",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "CREATE",
                "UPDATE",
                "DELETE",
                "PUBLISH",
                "UNPUBLISH",
                "APPROVE",
                "REJECT"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Actividad obtenida exitosamente",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RecentActivityDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obtener actividad reciente",
        "tags": [
          "Dashboard"
        ]
      }
    }
  },
  "info": {
    "title": "japm.app API",
    "description": "API for the japm.app Prompt Engineering application",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http",
        "name": "JWT",
        "description": "Enter JWT token",
        "in": "header"
      }
    },
    "schemas": {
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "User's name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com",
            "description": "Unique user email"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "example": "password123",
            "description": "User's password"
          },
          "role": {
            "type": "string",
            "description": "Role of the user",
            "enum": [
              "user",
              "admin",
              "tenant_admin",
              "prompt_consumer"
            ],
            "default": "user"
          },
          "tenantId": {
            "type": "string",
            "pattern": "/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$|^default-tenant$/",
            "description": "Optional tenant ID to create the user in. Only used if the requesting user is a tenant_admin. Can be a UUID or \"default-tenant\""
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {}
      },
      "RegisterDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email address",
            "example": "test@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "description": "User password",
            "example": "password123"
          },
          "name": {
            "type": "string",
            "maxLength": 100,
            "description": "User full name",
            "example": "Test User"
          }
        },
        "required": [
          "email",
          "password",
          "name"
        ]
      },
      "UserProfileResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique user identifier",
            "example": "clg123xyz"
          },
          "email": {
            "type": "string",
            "description": "User's email address",
            "example": "user@example.com"
          },
          "name": {
            "type": "string",
            "description": "User's full name",
            "example": "John Doe"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Account creation timestamp",
            "example": "2024-03-20T10:30:00Z"
          }
        },
        "required": [
          "id",
          "email",
          "name",
          "createdAt"
        ]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email address",
            "example": "test@example.com"
          },
          "password": {
            "type": "string",
            "description": "User password",
            "example": "password123"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "JWT access token for authentication",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        },
        "required": [
          "access_token"
        ]
      },
      "CreateRegionDto": {
        "type": "object",
        "properties": {
          "languageCode": {
            "type": "string",
            "minLength": 5,
            "maxLength": 5,
            "description": "Unique language code acting as ID",
            "example": "de-DE"
          },
          "name": {
            "type": "string",
            "description": "Name of the region",
            "example": "Germany"
          },
          "parentRegionId": {
            "type": "string",
            "description": "languageCode of the parent region (optional)",
            "example": "eu"
          },
          "timeZone": {
            "type": "string",
            "description": "Time zone",
            "example": "Europe/Berlin"
          },
          "notes": {
            "type": "string",
            "description": "Default formality level (optional)",
            "example": "Formal"
          }
        },
        "required": [
          "languageCode",
          "name"
        ]
      },
      "RegionDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the region",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Name of the region",
            "example": "United States"
          },
          "description": {
            "type": "string",
            "description": "Optional description of the region",
            "example": "English speaking region for North America"
          },
          "projectId": {
            "type": "string",
            "description": "ID of the project this region belongs to",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "languageCode": {
            "type": "string",
            "description": "Language code for the region",
            "example": "en-US"
          },
          "parentRegionId": {
            "type": "string",
            "nullable": true,
            "description": "ID of the parent region, if any",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "timeZone": {
            "type": "string",
            "description": "Time zone for the region",
            "example": "America/New_York"
          },
          "notes": {
            "type": "string",
            "description": "Optional notes about the region",
            "example": "Primary region for English content"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-01T00:00:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "projectId",
          "languageCode",
          "timeZone",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateRegionDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the region",
            "example": "Germany"
          },
          "parentRegionId": {
            "type": "string",
            "description": "languageCode of the parent region (optional)",
            "example": "eu"
          },
          "timeZone": {
            "type": "string",
            "description": "Time zone",
            "example": "Europe/Berlin"
          },
          "notes": {
            "type": "string",
            "description": "Default formality level (optional)",
            "example": "Formal"
          }
        }
      },
      "CreateCulturalDataDto": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Unique key for the cultural data within the project",
            "example": "direct-and-formal"
          },
          "regionId": {
            "type": "string",
            "minLength": 5,
            "maxLength": 5,
            "description": "ID (CUID) of the Region this data applies to"
          },
          "style": {
            "type": "string",
            "description": "The style of communication"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes"
          }
        },
        "required": [
          "key",
          "regionId",
          "style"
        ]
      },
      "CulturalDataResponse": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Unique key for the cultural data within the project",
            "example": "direct-and-formal"
          },
          "regionId": {
            "type": "string",
            "minLength": 5,
            "maxLength": 5,
            "description": "ID (CUID) of the Region this data applies to"
          },
          "style": {
            "type": "string",
            "description": "The style of communication"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes"
          },
          "region": {
            "$ref": "#/components/schemas/CreateRegionDto"
          },
          "projectId": {
            "type": "string"
          }
        },
        "required": [
          "key",
          "regionId",
          "style",
          "region",
          "projectId"
        ]
      },
      "UpdateCulturalDataDto": {
        "type": "object",
        "properties": {
          "style": {
            "type": "string",
            "description": "The style of communication"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes"
          },
          "key": {
            "type": "string",
            "description": "The key identifier for the cultural data"
          }
        }
      },
      "InitialTranslationDto": {
        "type": "object",
        "properties": {
          "languageCode": {
            "type": "string",
            "minLength": 2,
            "maxLength": 10,
            "description": "ISO language code (e.g., es, en)"
          },
          "promptText": {
            "type": "string",
            "description": "Translated prompt text"
          }
        },
        "required": [
          "languageCode",
          "promptText"
        ]
      },
      "CreatePromptDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the prompt. This will be slugified by the system to create a unique identifier.",
            "example": "Customer Welcome Greeting"
          },
          "description": {
            "type": "string",
            "description": "Description of the prompt's purpose.",
            "example": "Initial prompt to greet a customer."
          },
          "tags": {
            "uniqueItems": true,
            "description": "List of tag names to associate.",
            "example": [
              "welcome",
              "general"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "object",
            "description": "The type of prompt"
          },
          "promptText": {
            "type": "string",
            "description": "Base prompt text for the first version (1.0.0)",
            "example": "Hello {{customer_name}}, welcome."
          },
          "languageCode": {
            "type": "string",
            "minLength": 2,
            "maxLength": 10,
            "description": "Código de idioma para la primera versión (e.g., en-US, es-ES). Se obtiene del listado de regiones del proyecto.",
            "example": "en-US"
          },
          "initialTranslations": {
            "description": "Optional initial translations for the first version",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InitialTranslationDto"
            }
          }
        },
        "required": [
          "name",
          "type",
          "promptText",
          "languageCode"
        ]
      },
      "UpdatePromptDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "New name for the prompt.",
            "example": "Updated Greeting Prompt"
          },
          "description": {
            "type": "string",
            "description": "New description of the prompt's purpose.",
            "example": "Updated prompt for greetings."
          },
          "type": {
            "type": "string",
            "description": "New type for the prompt.",
            "enum": [
              "SYSTEM",
              "USER",
              "ASSISTANT",
              "GUARD",
              "COMPOSITE",
              "CONTEXT",
              "FUNCTION",
              "EXAMPLE",
              "TEMPLATE"
            ],
            "example": "USER"
          },
          "tagIds": {
            "description": "Complete list of Tag IDs to associate (replaces existing ones). Empty array to remove all.",
            "example": [
              "cma...uuid1",
              "cma...uuid2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GeneratePromptStructureDto": {
        "type": "object",
        "properties": {
          "userPrompt": {
            "type": "string",
            "description": "The user prompt text to be analyzed and structured.",
            "example": "Create a button that says \"Hello World\" in English and \"Hola Mundo\" in Spanish."
          }
        },
        "required": [
          "userPrompt"
        ]
      },
      "CreateProjectDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the project",
            "example": "My Awesome Project"
          },
          "description": {
            "type": "string",
            "description": "Optional description for the project",
            "example": "A project to demonstrate NestJS and Prisma"
          }
        },
        "required": [
          "name"
        ]
      },
      "ProjectDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the project",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Name of the project",
            "example": "My Project"
          },
          "description": {
            "type": "string",
            "description": "Optional description of the project",
            "example": "A project for managing content"
          },
          "tenantId": {
            "type": "string",
            "description": "ID of the tenant this project belongs to",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "ownerUserId": {
            "type": "string",
            "description": "ID of the user who owns this project",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-01T00:00:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "tenantId",
          "ownerUserId",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateProjectDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the project",
            "example": "My Awesome Project"
          },
          "description": {
            "type": "string",
            "description": "Optional description for the project",
            "example": "A project to demonstrate NestJS and Prisma"
          }
        }
      },
      "CreateSystemPromptDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "description": "Unique name/identifier for the system prompt",
            "example": "summarize_meeting_notes"
          },
          "description": {
            "type": "string",
            "maxLength": 500,
            "description": "Optional description of the prompt's purpose",
            "example": "Summarizes long meeting transcripts into key points."
          },
          "promptText": {
            "type": "string",
            "description": "The actual text content of the system prompt",
            "example": "Summarize the following text into bullet points..."
          },
          "category": {
            "type": "string",
            "maxLength": 50,
            "description": "Optional category for grouping prompts",
            "example": "summarization"
          }
        },
        "required": [
          "name",
          "promptText"
        ]
      },
      "UpdateSystemPromptDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "description": "Unique name/identifier for the system prompt",
            "example": "summarize_meeting_notes"
          },
          "description": {
            "type": "string",
            "maxLength": 500,
            "description": "Optional description of the prompt's purpose",
            "example": "Summarizes long meeting transcripts into key points."
          },
          "promptText": {
            "type": "string",
            "description": "The actual text content of the system prompt",
            "example": "Summarize the following text into bullet points..."
          },
          "category": {
            "type": "string",
            "maxLength": 50,
            "description": "Optional category for grouping prompts",
            "example": "summarization"
          }
        }
      },
      "ExecuteRawDto": {
        "type": "object",
        "properties": {
          "userText": {
            "type": "string",
            "description": "The raw text input from the user.",
            "example": "Explain the process of photosynthesis in simple terms."
          },
          "systemPromptName": {
            "type": "string",
            "description": "The unique name of the SystemPrompt to use.",
            "example": "helpful_assistant_concise"
          },
          "aiModelId": {
            "type": "string",
            "description": "The unique ID (CUID) of the AIModel to use for execution.",
            "example": "cmac24bp1000ck6x5iwgju5p1"
          },
          "variables": {
            "type": "object",
            "description": "Optional variables to substitute in the system prompt.",
            "example": {
              "text": "Hello world",
              "targetLanguage": "es-ES"
            }
          }
        },
        "required": [
          "userText",
          "systemPromptName",
          "aiModelId"
        ]
      },
      "CreateTenantAdminUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email for the initial tenant admin user.",
            "example": "admin@acme.com"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "description": "Password for the initial tenant admin user.",
            "example": "Str0ngP@sswOrd!"
          },
          "name": {
            "type": "string",
            "description": "Name for the initial tenant admin user.",
            "example": "Admin User"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "CreateTenantDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the tenant.",
            "example": "Acme Corporation"
          },
          "marketplaceRequiresApproval": {
            "type": "boolean",
            "description": "Indicates if marketplace prompt versions require approval for this tenant. Defaults to true.",
            "example": true
          },
          "initialAdminUser": {
            "description": "Details for creating an initial admin user for this tenant.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateTenantAdminUserDto"
              }
            ]
          }
        },
        "required": [
          "name",
          "initialAdminUser"
        ]
      },
      "TenantDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the tenant.",
            "example": "clxrbspgy0000u0fwh8zgy17u"
          },
          "name": {
            "type": "string",
            "description": "The name of the tenant.",
            "example": "Acme Corporation"
          },
          "marketplaceRequiresApproval": {
            "type": "boolean",
            "description": "Indicates if marketplace prompt versions require approval for this tenant.",
            "example": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "The date and time the tenant was created.",
            "example": "2024-01-01T12:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "The date and time the tenant was last updated.",
            "example": "2024-01-02T15:30:00.000Z"
          }
        },
        "required": [
          "id",
          "name",
          "marketplaceRequiresApproval",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateTenantDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The new name of the tenant.",
            "example": "Acme Corp Innovations"
          },
          "marketplaceRequiresApproval": {
            "type": "boolean",
            "description": "Set if marketplace prompt versions require approval for this tenant.",
            "example": false
          }
        }
      },
      "CreateTagDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "Nombre único de la etiqueta",
            "example": "customer-feedback"
          },
          "description": {
            "type": "string",
            "description": "Descripción opcional de la etiqueta",
            "example": "Etiquetas relacionadas con comentarios de clientes."
          }
        },
        "required": [
          "name"
        ]
      },
      "TagDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the tag (CUID)",
            "example": "clxrb8rnr0000k4yl9k5l3w1e"
          },
          "name": {
            "type": "string",
            "description": "Unique tag name within the project",
            "example": "customer_feedback"
          },
          "description": {
            "type": "string",
            "description": "Description of the tag",
            "example": "Tags related to customer feedback."
          },
          "projectId": {
            "type": "string",
            "description": "ID of the project this tag belongs to (CUID)",
            "example": "clxrb7t8h0000k4ylbafh4n6y"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "projectId"
        ]
      },
      "UpdateTagDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "Nuevo nombre único de la etiqueta (opcional)",
            "example": "user-feedback"
          },
          "description": {
            "type": "string",
            "description": "Nueva descripción opcional de la etiqueta",
            "example": "Comentarios generales de los usuarios."
          }
        }
      },
      "CreateEnvironmentDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "Unique name of the environment",
            "example": "production"
          },
          "description": {
            "type": "string",
            "description": "Optional description of the environment",
            "example": "Main production environment"
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateEnvironmentDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "New unique name for the environment (optional)",
            "example": "staging"
          },
          "description": {
            "type": "string",
            "description": "New optional description for the environment",
            "example": "Pre-production testing environment"
          }
        }
      },
      "CreatePromptAssetDto": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Clave única identificadora del asset (e.g., saludo_formal_es)",
            "example": "saludo_formal_es"
          },
          "name": {
            "type": "string",
            "description": "Nombre descriptivo del asset",
            "example": "Saludo Formal (España)"
          },
          "category": {
            "type": "string",
            "description": "Categoría para organizar assets (e.g., Saludos, Despedidas)",
            "example": "Saludos"
          },
          "initialValue": {
            "type": "string",
            "description": "Valor inicial del asset para la primera versión (1.0.0)",
            "example": "Texto inicial"
          },
          "initialChangeMessage": {
            "type": "string",
            "description": "Mensaje de cambio para la primera versión"
          },
          "tenantId": {
            "type": "string",
            "description": "ID del tenant al que pertenece este asset",
            "example": "tenant-cuid-xxxx"
          },
          "initialTranslations": {
            "description": "Traducciones iniciales para diferentes idiomas",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InitialTranslationDto"
            }
          }
        },
        "required": [
          "key",
          "name",
          "initialValue",
          "tenantId"
        ]
      },
      "UpdatePromptAssetDto": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "Categoría para organizar assets (e.g., Saludos, Despedidas)",
            "example": "Saludos"
          },
          "tenantId": {
            "type": "string",
            "description": "ID del tenant al que pertenece este asset",
            "example": "tenant-cuid-xxxx"
          },
          "initialTranslations": {
            "description": "Traducciones iniciales para diferentes idiomas",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InitialTranslationDto"
            }
          },
          "enabled": {
            "type": "boolean",
            "description": "Activa o desactiva el asset"
          }
        }
      },
      "CreateRagDocumentMetadataDto": {
        "type": "object",
        "properties": {
          "regionId": {
            "type": "string",
            "format": "uuid",
            "description": "ID de la región asociada (opcional)"
          },
          "documentName": {
            "type": "string",
            "description": "Nombre del documento RAG",
            "example": "policy_update_q1_2024.pdf"
          },
          "category": {
            "type": "string",
            "description": "Categoría (opcional)",
            "example": "Compliance"
          },
          "complianceReviewed": {
            "type": "boolean",
            "description": "Indica si ha sido revisado por compliance",
            "default": false
          },
          "piiRiskLevel": {
            "type": "string",
            "description": "Nivel de riesgo PII (Información Personal Identificable) (opcional)",
            "example": "Low"
          },
          "lastReviewedBy": {
            "type": "string",
            "description": "Identificador de quién lo revisó por última vez (opcional)",
            "example": "user_cuid_123"
          }
        },
        "required": [
          "documentName"
        ]
      },
      "RagDocumentMetadataResponse": {
        "type": "object",
        "properties": {
          "regionId": {
            "type": "string",
            "format": "uuid",
            "description": "ID de la región asociada (opcional)"
          },
          "documentName": {
            "type": "string",
            "description": "Nombre del documento RAG",
            "example": "policy_update_q1_2024.pdf"
          },
          "category": {
            "type": "string",
            "description": "Categoría (opcional)",
            "example": "Compliance"
          },
          "complianceReviewed": {
            "type": "boolean",
            "description": "Indica si ha sido revisado por compliance",
            "default": false
          },
          "piiRiskLevel": {
            "type": "string",
            "description": "Nivel de riesgo PII (Información Personal Identificable) (opcional)",
            "example": "Low"
          },
          "lastReviewedBy": {
            "type": "string",
            "description": "Identificador de quién lo revisó por última vez (opcional)",
            "example": "user_cuid_123"
          },
          "region": {
            "$ref": "#/components/schemas/CreateRegionDto"
          },
          "id": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          }
        },
        "required": [
          "documentName",
          "id",
          "projectId"
        ]
      },
      "UpdateRagDocumentMetadataDto": {
        "type": "object",
        "properties": {}
      },
      "ExecutePromptBodyDto": {
        "type": "object",
        "properties": {
          "variables": {
            "type": "object"
          }
        },
        "required": [
          "variables"
        ]
      },
      "CreateAiModelDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique name for the AI model",
            "example": "gpt-4-turbo-2024-04-09"
          },
          "provider": {
            "type": "string",
            "description": "Provider of the AI model",
            "example": "OpenAI"
          },
          "description": {
            "type": "string",
            "description": "Optional description for the AI model"
          },
          "apiIdentifier": {
            "type": "string",
            "description": "Identifier used for API calls",
            "example": "openai/gpt-4-turbo"
          }
        },
        "required": [
          "name"
        ]
      },
      "AiModelResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique CUID of the AI model",
            "example": "clxkzjw8z0000k6x5abcd1234"
          },
          "name": {
            "type": "string",
            "description": "Unique name for the AI model within the project",
            "example": "gpt-4o-mini"
          },
          "provider": {
            "type": "string",
            "nullable": true,
            "description": "Provider of the AI model",
            "example": "OpenAI"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Optional description for the AI model"
          },
          "apiIdentifier": {
            "type": "string",
            "nullable": true,
            "description": "Identifier used for API calls",
            "example": "gpt-4o-mini"
          },
          "apiKeyEnvVar": {
            "type": "string",
            "nullable": true,
            "description": "Environment variable name for the API Key"
          },
          "temperature": {
            "type": "number",
            "nullable": true,
            "description": "Default temperature setting",
            "example": 0.7
          },
          "maxTokens": {
            "type": "number",
            "nullable": true,
            "description": "Default max tokens setting",
            "example": 4096
          },
          "supportsJson": {
            "type": "boolean",
            "description": "Whether the model reliably supports JSON output mode"
          },
          "contextWindow": {
            "type": "number",
            "nullable": true,
            "description": "Maximum context window size in tokens"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp of creation"
          },
          "projectId": {
            "type": "string",
            "description": "ID of the project this model belongs to",
            "example": "clwabcdefgh0001k6x5efgh5678"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "projectId"
        ]
      },
      "UpdateAiModelDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique name for the AI model",
            "example": "gpt-4-turbo-2024-04-09"
          },
          "provider": {
            "type": "string",
            "description": "Provider of the AI model",
            "example": "OpenAI"
          },
          "description": {
            "type": "string",
            "description": "Optional description for the AI model"
          },
          "apiIdentifier": {
            "type": "string",
            "description": "Identifier used for API calls",
            "example": "openai/gpt-4-turbo"
          }
        }
      },
      "CreatePromptVersionDto": {
        "type": "object",
        "properties": {
          "promptText": {
            "type": "string",
            "description": "El valor/texto del prompt para esta nueva versión"
          },
          "versionTag": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "/^\\d+\\.\\d+\\.\\d+(-[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)*)?(\\+[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)*)?$/",
            "description": "Tag de versión para esta nueva versión (e.g., 1.0.0, 1.0.0-beta.1). Debe ser único por prompt.",
            "example": "1.0.0"
          },
          "languageCode": {
            "type": "string",
            "minLength": 2,
            "maxLength": 10,
            "description": "Código de idioma para esta versión (e.g., en-US, es-ES). Se obtiene del listado de regiones del proyecto.",
            "example": "en-US"
          },
          "changeMessage": {
            "type": "string",
            "description": "Mensaje describiendo los cambios en esta versión."
          },
          "initialTranslations": {
            "description": "Optional initial translations for this new version.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InitialTranslationDto"
            }
          }
        },
        "required": [
          "promptText",
          "versionTag",
          "languageCode"
        ]
      },
      "UpdatePromptVersionDto": {
        "type": "object",
        "properties": {
          "promptText": {
            "type": "string",
            "description": "El valor/texto del prompt para esta nueva versión"
          },
          "versionTag": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "/^\\d+\\.\\d+\\.\\d+(-[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)*)?(\\+[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)*)?$/",
            "description": "Tag de versión para esta nueva versión (e.g., 1.0.0, 1.0.0-beta.1). Debe ser único por prompt.",
            "example": "1.0.0"
          },
          "languageCode": {
            "type": "string",
            "minLength": 2,
            "maxLength": 10,
            "description": "Código de idioma para esta versión (e.g., en-US, es-ES). Se obtiene del listado de regiones del proyecto.",
            "example": "en-US"
          },
          "changeMessage": {
            "type": "string",
            "description": "Mensaje describiendo los cambios en esta versión."
          },
          "initialTranslations": {
            "description": "Optional initial translations for this new version.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InitialTranslationDto"
            }
          }
        }
      },
      "CreatePromptTranslationDto": {
        "type": "object",
        "properties": {
          "languageCode": {
            "type": "string",
            "minLength": 5,
            "maxLength": 5,
            "description": "Código de idioma para esta traducción (formato xx-XX)",
            "example": "es-ES"
          },
          "promptText": {
            "type": "string",
            "description": "Texto del prompt traducido a este idioma"
          }
        },
        "required": [
          "languageCode",
          "promptText"
        ]
      },
      "UpdatePromptTranslationDto": {
        "type": "object",
        "properties": {
          "promptText": {
            "type": "string",
            "description": "Texto del prompt traducido a este idioma"
          }
        }
      },
      "AssetTranslationDto": {
        "type": "object",
        "properties": {
          "languageCode": {
            "type": "string",
            "description": "Código de idioma de la traducción (e.g., es-ES, fr-FR).",
            "example": "fr-FR"
          },
          "value": {
            "type": "string",
            "description": "Valor traducido del asset para esta versión y idioma."
          }
        },
        "required": [
          "languageCode",
          "value"
        ]
      },
      "CreatePromptAssetVersionDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "El valor del asset para esta nueva versión"
          },
          "versionTag": {
            "type": "string",
            "description": "Etiqueta de versión (e.g., 1.0.1, 1.1.0). Si no se provee, se podría auto-incrementar o requerir.",
            "example": "1.0.1"
          },
          "changeMessage": {
            "type": "string",
            "description": "Mensaje describiendo los cambios en esta versión."
          },
          "languageCode": {
            "type": "string",
            "minLength": 2,
            "maxLength": 10,
            "description": "Código de idioma para la versión del asset (e.g., en-US, es-ES). Se obtiene del listado de regiones del proyecto.",
            "example": "en-US"
          },
          "translations": {
            "description": "Traducciones para esta versión del asset.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetTranslationDto"
            }
          }
        },
        "required": [
          "value",
          "languageCode"
        ]
      },
      "UpdatePromptAssetVersionDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Nuevo valor/contenido del asset para esta versión.",
            "example": "¡Hola Mundo Corregido!"
          },
          "changeMessage": {
            "type": "string",
            "description": "Nuevo mensaje describiendo los cambios.",
            "example": "Corrección de error tipográfico."
          },
          "languageCode": {
            "type": "string",
            "description": "Código de idioma para la versión del asset (ej: en-US, es-ES).",
            "example": "en-US"
          }
        }
      },
      "CreateAssetTranslationDto": {
        "type": "object",
        "properties": {
          "languageCode": {
            "type": "string",
            "minLength": 5,
            "maxLength": 5,
            "pattern": "/^[a-z]{2}-[A-Z]{2}$/",
            "description": "Código de idioma para esta traducción (formato xx-XX)",
            "example": "es-ES"
          },
          "value": {
            "type": "string",
            "description": "Valor del asset traducido a este idioma"
          }
        },
        "required": [
          "languageCode",
          "value"
        ]
      },
      "UpdateAssetTranslationDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Valor del asset traducido a este idioma"
          }
        }
      },
      "ExecuteLlmDto": {
        "type": "object",
        "properties": {
          "modelId": {
            "type": "string",
            "description": "ID del modelo de IA a utilizar",
            "example": "gpt-4o-2024-05-13"
          },
          "promptId": {
            "type": "string",
            "description": "ID del prompt a ejecutar",
            "example": "system-base"
          },
          "projectId": {
            "type": "string",
            "description": "ID del proyecto al que pertenece el prompt",
            "example": "codegen-examples"
          },
          "versionTag": {
            "type": "string",
            "description": "Versión del prompt a ejecutar",
            "example": "1.0.0",
            "default": "latest"
          },
          "languageCode": {
            "type": "string",
            "description": "Código de idioma para el prompt",
            "example": "es-ES"
          },
          "variables": {
            "type": "object",
            "description": "Variables para sustituir en el prompt",
            "example": {
              "userName": "John",
              "language": "es-ES"
            }
          },
          "promptText": {
            "type": "string",
            "description": "Texto del prompt a ejecutar (solo si no se proporciona promptId)",
            "example": "Escribe un poema sobre la primavera"
          }
        },
        "required": [
          "modelId"
        ]
      },
      "DashboardStatsDto": {
        "type": "object",
        "properties": {
          "activeProjects": {
            "type": "number",
            "description": "Número de proyectos activos",
            "example": 5
          },
          "executedPrompts": {
            "type": "number",
            "description": "Número total de prompts ejecutados",
            "example": 150
          },
          "activeModels": {
            "type": "number",
            "description": "Número de modelos de IA activos",
            "example": 3
          },
          "activeUsers": {
            "type": "number",
            "description": "Número de usuarios activos",
            "example": 10
          },
          "activeAssets": {
            "type": "number",
            "description": "Número de assets activos",
            "example": 25
          },
          "activePrompts": {
            "type": "number",
            "description": "Número de prompts activos",
            "example": 50
          },
          "configuredRegions": {
            "type": "number",
            "description": "Número de regiones configuradas",
            "example": 8
          },
          "culturalDataEntries": {
            "type": "number",
            "description": "Número de datos culturales registrados",
            "example": 15
          }
        },
        "required": [
          "activeProjects",
          "executedPrompts",
          "activeModels",
          "activeUsers",
          "activeAssets",
          "activePrompts",
          "configuredRegions",
          "culturalDataEntries"
        ]
      },
      "RecentActivityDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID único de la actividad",
            "example": "clg123xyz"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp de cuando ocurrió la actividad",
            "example": "2024-03-20T15:30:00Z"
          },
          "action": {
            "enum": [
              "CREATE",
              "UPDATE",
              "DELETE",
              "PUBLISH",
              "UNPUBLISH",
              "APPROVE",
              "REJECT"
            ],
            "type": "string",
            "description": "Tipo de acción realizada",
            "example": "CREATE"
          },
          "entityType": {
            "enum": [
              "PROMPT",
              "PROMPT_VERSION",
              "PROMPT_TRANSLATION",
              "PROMPT_ASSET",
              "PROMPT_ASSET_VERSION",
              "ASSET_TRANSLATION",
              "PROJECT",
              "ENVIRONMENT",
              "AI_MODEL",
              "TAG",
              "REGION",
              "CULTURAL_DATA",
              "RAG_DOCUMENT"
            ],
            "type": "string",
            "description": "Tipo de entidad afectada",
            "example": "PROMPT"
          },
          "entityId": {
            "type": "string",
            "description": "ID de la entidad afectada",
            "example": "prompt-123"
          },
          "userId": {
            "type": "string",
            "description": "ID del usuario que realizó la acción",
            "example": "user-456"
          },
          "userName": {
            "type": "string",
            "description": "Nombre del usuario que realizó la acción",
            "example": "John Doe"
          },
          "projectId": {
            "type": "string",
            "description": "ID del proyecto relacionado",
            "example": "project-789"
          },
          "projectName": {
            "type": "string",
            "description": "Nombre del proyecto relacionado",
            "example": "Mi Proyecto"
          },
          "details": {
            "type": "object",
            "description": "Detalles adicionales de la actividad",
            "example": {
              "version": "1.0.0",
              "languageCode": "es-ES"
            }
          },
          "changes": {
            "type": "object",
            "properties": {
              "old": {
                "type": "object"
              },
              "new": {
                "type": "object"
              }
            },
            "required": []
          }
        },
        "required": [
          "id",
          "timestamp",
          "action",
          "entityType",
          "entityId",
          "userId",
          "userName",
          "projectId",
          "projectName"
        ]
      }
    }
  }
}
{
  "openapi": "3.0.0",
  "paths": {
    "/api/users": {
      "post": {
        "operationId": "UserController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data."
          }
        },
        "summary": "Create a new user",
        "tags": [
          "Users"
        ]
      },
      "get": {
        "operationId": "UserController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateUserDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all users",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/{id}": {
      "get": {
        "operationId": "UserController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserDto"
                }
              }
            }
          },
          "404": {
            "description": "User not found."
          }
        },
        "summary": "Get a user by ID",
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "operationId": "UserController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the user to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data."
          },
          "404": {
            "description": "User not found."
          }
        },
        "summary": "Update a user by ID",
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "operationId": "UserController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the user to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully."
          },
          "404": {
            "description": "User not found."
          }
        },
        "summary": "Delete a user by ID",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/auth/register": {
      "post": {
        "operationId": "AuthController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data."
          },
          "409": {
            "description": "Email already exists."
          }
        },
        "summary": "Register a new user",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful, returns JWT token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Invalid Credentials)."
          }
        },
        "summary": "Log in a user",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/profile": {
      "get": {
        "operationId": "AuthController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User profile data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Invalid or missing token)."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get current user profile",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/projects/{projectId}/regions": {
      "post": {
        "operationId": "RegionController_create",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRegionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Region created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRegionDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "404": {
            "description": "Parent region not found."
          },
          "409": {
            "description": "languageCode already exists."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Creates a new region for a specific project",
        "tags": [
          "Regions"
        ]
      },
      "get": {
        "operationId": "RegionController_findAll",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of regions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateRegionDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Gets all regions for a specific project",
        "tags": [
          "Regions"
        ]
      }
    },
    "/api/projects/{projectId}/regions/{languageCode}": {
      "get": {
        "operationId": "RegionController_findOne",
        "parameters": [
          {
            "name": "languageCode",
            "required": true,
            "in": "path",
            "description": "Language code (ID) of the region",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Region found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRegionDto"
                }
              }
            }
          },
          "404": {
            "description": "Project or Region not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Gets a specific region within a project",
        "tags": [
          "Regions"
        ]
      },
      "patch": {
        "operationId": "RegionController_update",
        "parameters": [
          {
            "name": "languageCode",
            "required": true,
            "in": "path",
            "description": "Language code (ID) of the region to update",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRegionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Region updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRegionDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data (languageCode cannot be changed)."
          },
          "404": {
            "description": "Project or Region not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Updates a specific region within a project",
        "tags": [
          "Regions"
        ]
      },
      "delete": {
        "operationId": "RegionController_remove",
        "parameters": [
          {
            "name": "languageCode",
            "required": true,
            "in": "path",
            "description": "Language code (ID) of the region to delete",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Region deleted."
          },
          "404": {
            "description": "Project or Region not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Deletes a specific region within a project",
        "tags": [
          "Regions"
        ]
      }
    },
    "/api/projects/{projectId}/cultural-data": {
      "post": {
        "operationId": "CulturalDataController_create",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCulturalDataDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Cultural data created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CulturalDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "404": {
            "description": "Project or referenced Region not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Creates new cultural data within a project",
        "tags": [
          "Cultural Data"
        ]
      },
      "get": {
        "operationId": "CulturalDataController_findAll",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of cultural data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CulturalDataResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Gets all cultural data for a project",
        "tags": [
          "Cultural Data"
        ]
      }
    },
    "/api/projects/{projectId}/cultural-data/{culturalDataId}": {
      "get": {
        "operationId": "CulturalDataController_findOne",
        "parameters": [
          {
            "name": "culturalDataId",
            "required": true,
            "in": "path",
            "description": "ID of the cultural data",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cultural data found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CulturalDataResponse"
                }
              }
            }
          },
          "404": {
            "description": "Project or Cultural data not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Gets cultural data by ID within a project",
        "tags": [
          "Cultural Data"
        ]
      },
      "patch": {
        "operationId": "CulturalDataController_update",
        "parameters": [
          {
            "name": "culturalDataId",
            "required": true,
            "in": "path",
            "description": "ID to update",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCulturalDataDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cultural data updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CulturalDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "404": {
            "description": "Project or Cultural data not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Updates cultural data by ID within a project",
        "tags": [
          "Cultural Data"
        ]
      },
      "delete": {
        "operationId": "CulturalDataController_remove",
        "parameters": [
          {
            "name": "culturalDataId",
            "required": true,
            "in": "path",
            "description": "ID to delete",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cultural data deleted."
          },
          "404": {
            "description": "Project or Cultural data not found."
          },
          "409": {
            "description": "Conflict on delete (referenced by other entities)."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Deletes cultural data by ID within a project",
        "tags": [
          "Cultural Data"
        ]
      }
    },
    "/api/projects/{projectId}/prompts": {
      "post": {
        "operationId": "PromptController_create",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePromptDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Prompt created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data (e.g., missing initial promptText)."
          },
          "404": {
            "description": "Project or Tag not found."
          },
          "409": {
            "description": "Conflict, a prompt with this name already exists in the project."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Creates a new logical prompt within a project",
        "tags": [
          "Prompts"
        ]
      },
      "get": {
        "operationId": "PromptController_findAll",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of prompts.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreatePromptDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Gets all logical prompts for a project",
        "tags": [
          "Prompts"
        ]
      }
    },
    "/api/projects/{projectId}/prompts/{promptName}": {
      "get": {
        "operationId": "PromptController_findOne",
        "parameters": [
          {
            "name": "promptName",
            "required": true,
            "in": "path",
            "description": "Unique name of the prompt within the project",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Prompt found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptDto"
                }
              }
            }
          },
          "404": {
            "description": "Project or Prompt not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Gets a logical prompt by its name within a project",
        "tags": [
          "Prompts"
        ]
      }
    },
    "/api/projects/{projectId}/prompts/{promptId}": {
      "patch": {
        "operationId": "PromptController_update",
        "parameters": [
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "ID of the prompt to update (CUID)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Data to update the prompt",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromptDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Prompt updated successfully."
          },
          "400": {
            "description": "Invalid data."
          },
          "404": {
            "description": "Project, Prompt or Tag not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Updates an existing prompt by ID for a specific project",
        "tags": [
          "Prompts"
        ]
      },
      "delete": {
        "operationId": "PromptController_remove",
        "parameters": [
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "ID of the prompt to delete (CUID)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Prompt deleted."
          },
          "404": {
            "description": "Project or Prompt not found."
          },
          "409": {
            "description": "Conflict on deletion (check non-cascading relations)."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Deletes a logical prompt (and its associated versions via Cascade) within a project by ID",
        "tags": [
          "Prompts"
        ]
      }
    },
    "/api/projects/{projectId}/prompts/{promptId}/versions": {
      "post": {
        "operationId": "PromptVersionController_create",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "Prompt CUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePromptVersionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Version created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptVersionDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data (e.g., duplicate versionTag)."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project or Prompt not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new version for a specific prompt within a project",
        "tags": [
          "Prompt Versions (within Project/Prompt)"
        ]
      },
      "get": {
        "operationId": "PromptVersionController_findAll",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "Prompt CUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of versions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreatePromptVersionDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project or Prompt not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all versions for a specific prompt within a project",
        "tags": [
          "Prompt Versions (within Project/Prompt)"
        ]
      }
    },
    "/api/projects/{projectId}/prompts/{promptName}/versions/{versionId}/translations": {
      "put": {
        "operationId": "PromptController_addOrUpdateTranslation",
        "parameters": [
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "description": "ID of the version to translate (CUID)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptName",
            "required": true,
            "in": "path",
            "description": "Parent prompt name (contextual)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdatePromptTranslationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Translation created or updated."
          },
          "400": {
            "description": "Invalid data."
          },
          "404": {
            "description": "Project or Version not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Adds or updates a translation for a specific prompt version in the project.",
        "tags": [
          "Prompts"
        ]
      }
    },
    "/api/projects/{projectId}/prompt-assets": {
      "post": {
        "operationId": "PromptAssetController_create",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePromptAssetDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Asset creado con su versión inicial."
          },
          "400": {
            "description": "Datos inválidos (e.g., falta initialValue)."
          },
          "404": {
            "description": "Proyecto no encontrado."
          },
          "409": {
            "description": "Conflicto, ya existe un asset con esa key en el proyecto."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Crea un nuevo prompt asset (y su primera versión) dentro de un proyecto",
        "tags": [
          "Prompt Assets"
        ]
      },
      "get": {
        "operationId": "PromptAssetController_findAll",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de assets."
          },
          "404": {
            "description": "Proyecto no encontrado."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obtiene todos los prompt assets de un proyecto",
        "tags": [
          "Prompt Assets"
        ]
      }
    },
    "/api/projects/{projectId}/prompt-assets/{assetKey}": {
      "get": {
        "operationId": "PromptAssetController_findOne",
        "parameters": [
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Key única del asset dentro del proyecto",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Asset encontrado con detalles."
          },
          "404": {
            "description": "Proyecto o Asset no encontrado."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obtiene un prompt asset por su key dentro de un proyecto",
        "tags": [
          "Prompt Assets"
        ]
      },
      "patch": {
        "operationId": "PromptAssetController_update",
        "parameters": [
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Key única del asset a actualizar",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromptAssetDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Asset actualizado."
          },
          "400": {
            "description": "Datos inválidos."
          },
          "404": {
            "description": "Proyecto o Asset no encontrado."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Actualiza metadatos de un prompt asset (nombre, descripción, etc.) dentro de un proyecto",
        "tags": [
          "Prompt Assets"
        ]
      },
      "delete": {
        "operationId": "PromptAssetController_remove",
        "parameters": [
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Key única del asset a eliminar",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Asset eliminado."
          },
          "404": {
            "description": "Proyecto o Asset no encontrado."
          },
          "409": {
            "description": "Conflicto al eliminar (revisar relaciones sin Cascade)."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Elimina un prompt asset (y sus versiones/traducciones por Cascade) dentro de un proyecto",
        "tags": [
          "Prompt Assets"
        ]
      }
    },
    "/api/projects/{projectId}/prompt-versions/{promptVersionId}/links": {
      "post": {
        "operationId": "PromptAssetLinkController_create",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptVersionId",
            "required": true,
            "in": "path",
            "description": "Prompt Version ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePromptAssetLinkDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Link created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptAssetLinkDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Prompt Version, or Asset Version not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Link an Asset Version to a Prompt Version within a Project",
        "tags": [
          "Prompt Asset Links (within Project/Version)"
        ]
      },
      "get": {
        "operationId": "PromptAssetLinkController_findAll",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptVersionId",
            "required": true,
            "in": "path",
            "description": "Prompt Version ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of links.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreatePromptAssetLinkDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project or Prompt Version not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all links for a specific Prompt Version within a Project",
        "tags": [
          "Prompt Asset Links (within Project/Version)"
        ]
      }
    },
    "/api/projects/{projectId}/prompt-versions/{promptVersionId}/links/{linkId}": {
      "get": {
        "operationId": "PromptAssetLinkController_findOne",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptVersionId",
            "required": true,
            "in": "path",
            "description": "Prompt Version ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "linkId",
            "required": true,
            "in": "path",
            "description": "Link ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Link found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptAssetLinkDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Prompt Version, or Link not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a specific link by its ID for a Prompt Version within a Project",
        "tags": [
          "Prompt Asset Links (within Project/Version)"
        ]
      },
      "patch": {
        "operationId": "PromptAssetLinkController_update",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptVersionId",
            "required": true,
            "in": "path",
            "description": "Prompt Version ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "linkId",
            "required": true,
            "in": "path",
            "description": "Link ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromptAssetLinkDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Link updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptAssetLinkDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Prompt Version, or Link not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a specific link by its ID for a Prompt Version within a Project",
        "tags": [
          "Prompt Asset Links (within Project/Version)"
        ]
      },
      "delete": {
        "operationId": "PromptAssetLinkController_remove",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptVersionId",
            "required": true,
            "in": "path",
            "description": "Prompt Version ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "linkId",
            "required": true,
            "in": "path",
            "description": "Link ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Link deleted."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Prompt Version, or Link not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a specific link by its ID for a Prompt Version within a Project",
        "tags": [
          "Prompt Asset Links (within Project/Version)"
        ]
      }
    },
    "/api/projects/{projectId}/rag-document-metadata": {
      "post": {
        "operationId": "RagDocumentMetadataController_create",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRagDocumentMetadataDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Metadatos creados.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RagDocumentMetadataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Datos inválidos."
          },
          "404": {
            "description": "Proyecto o Región referenciada no encontrada."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Crear metadatos para un documento RAG dentro de un proyecto",
        "tags": [
          "RAG Document Metadata"
        ]
      },
      "get": {
        "operationId": "RagDocumentMetadataController_findAll",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de metadatos.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RagDocumentMetadataResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Proyecto no encontrado."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obtener todos los metadatos de documentos RAG de un proyecto",
        "tags": [
          "RAG Document Metadata"
        ]
      }
    },
    "/api/projects/{projectId}/rag-document-metadata/{metadataId}": {
      "get": {
        "operationId": "RagDocumentMetadataController_findOne",
        "parameters": [
          {
            "name": "metadataId",
            "required": true,
            "in": "path",
            "description": "ID de los metadatos (CUID)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metadatos encontrados.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RagDocumentMetadataResponse"
                }
              }
            }
          },
          "404": {
            "description": "Proyecto o Metadatos no encontrados."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obtener metadatos por ID dentro de un proyecto",
        "tags": [
          "RAG Document Metadata"
        ]
      },
      "patch": {
        "operationId": "RagDocumentMetadataController_update",
        "parameters": [
          {
            "name": "metadataId",
            "required": true,
            "in": "path",
            "description": "ID a actualizar",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRagDocumentMetadataDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Metadatos actualizados.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RagDocumentMetadataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Datos inválidos."
          },
          "404": {
            "description": "Proyecto, Metadatos o Región referenciada no encontrada."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Actualizar metadatos por ID dentro de un proyecto",
        "tags": [
          "RAG Document Metadata"
        ]
      },
      "delete": {
        "operationId": "RagDocumentMetadataController_remove",
        "parameters": [
          {
            "name": "metadataId",
            "required": true,
            "in": "path",
            "description": "ID a eliminar",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metadatos eliminados."
          },
          "404": {
            "description": "Proyecto o Metadatos no encontrados."
          },
          "409": {
            "description": "Conflicto al eliminar (referenciado por otras entidades)."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Eliminar metadatos por ID dentro de un proyecto",
        "tags": [
          "RAG Document Metadata"
        ]
      }
    },
    "/api/health": {
      "get": {
        "operationId": "HealthController_check",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Health"
        ]
      }
    },
    "/serve-prompt/execute/{projectId}/{promptName}/{versionTag}": {
      "post": {
        "operationId": "ServePromptController_executePrompt",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptName",
            "required": true,
            "in": "path",
            "description": "The unique name of the prompt within the project",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Specific version tag (e.g., \"v1.2.0\")",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languageCode",
            "required": false,
            "in": "query",
            "description": "Optional language code for translation (e.g., \"es\")",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environmentName",
            "required": false,
            "in": "query",
            "description": "Optional environment context (currently informational)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Input variables for the prompt",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecutePromptBodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Processed prompt text ready for execution and metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "processedPrompt": "string",
                    "metadata": {}
                  }
                }
              }
            }
          },
          "201": {
            "description": ""
          },
          "400": {
            "description": "Invalid parameters or failed template rendering."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Prompt, or Version not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Assembles and prepares a specific prompt version for execution with provided variables",
        "tags": [
          "Serve Prompt"
        ]
      }
    },
    "/api/projects/mine": {
      "get": {
        "operationId": "ProjectController_findMine",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of user projects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateProjectDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get projects accessible by the current user",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects": {
      "post": {
        "operationId": "ProjectController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The project has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProjectDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          }
        },
        "summary": "Create a new project",
        "tags": [
          "Projects"
        ]
      },
      "get": {
        "operationId": "ProjectController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all projects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateProjectDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all projects",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/{id}": {
      "get": {
        "operationId": "ProjectController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Project CUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The found project record",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProjectDto"
                }
              }
            }
          },
          "404": {
            "description": "Project not found."
          }
        },
        "summary": "Get a project by ID",
        "tags": [
          "Projects"
        ]
      },
      "patch": {
        "operationId": "ProjectController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Project CUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The project has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProjectDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Project not found."
          }
        },
        "summary": "Update a project by ID",
        "tags": [
          "Projects"
        ]
      },
      "delete": {
        "operationId": "ProjectController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Project CUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The project has been successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProjectDto"
                }
              }
            }
          },
          "404": {
            "description": "Project not found."
          }
        },
        "summary": "Delete a project by ID",
        "tags": [
          "Projects"
        ]
      }
    },
    "/api/projects/{projectId}/aimodels": {
      "post": {
        "operationId": "AiModelController_create",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAiModelDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The AI model has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAiModelDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "409": {
            "description": "Conflict. AIModel with this name already exists."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new AI model for this project",
        "tags": [
          "AI Models (Project Specific)"
        ]
      },
      "get": {
        "operationId": "AiModelController_findAll",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of project-specific and global AI models.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateAiModelDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all AI models for this project (includes global models)",
        "tags": [
          "AI Models (Project Specific)"
        ]
      }
    },
    "/api/projects/{projectId}/aimodels/{aiModelId}": {
      "get": {
        "operationId": "AiModelController_findOne",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "aiModelId",
            "required": true,
            "in": "path",
            "description": "AI Model CUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The found AI model record",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAiModelDto"
                }
              }
            }
          },
          "404": {
            "description": "AI Model not found or not accessible for this project."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a specific AI model by ID (must belong to project or be global)",
        "tags": [
          "AI Models (Project Specific)"
        ]
      },
      "patch": {
        "operationId": "AiModelController_update",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "aiModelId",
            "required": true,
            "in": "path",
            "description": "AI Model CUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAiModelDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The AI model has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAiModelDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "AI Model not found."
          },
          "409": {
            "description": "Conflict. AIModel with this name already exists."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update an AI model by ID (must belong to project)",
        "tags": [
          "AI Models (Project Specific)"
        ]
      },
      "delete": {
        "operationId": "AiModelController_remove",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "aiModelId",
            "required": true,
            "in": "path",
            "description": "AI Model CUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The AI model has been successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAiModelDto"
                }
              }
            }
          },
          "404": {
            "description": "AI Model not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete an AI model by ID (must belong to project)",
        "tags": [
          "AI Models (Project Specific)"
        ]
      }
    },
    "/api/projects/{projectId}/tags": {
      "post": {
        "operationId": "TagController_create",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTagDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Etiqueta creada.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTagDto"
                }
              }
            }
          },
          "400": {
            "description": "Datos inválidos."
          },
          "404": {
            "description": "Proyecto no encontrado."
          },
          "409": {
            "description": "Conflicto, ya existe una etiqueta con ese nombre en el proyecto."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Crea una nueva etiqueta para un proyecto",
        "tags": [
          "Tags"
        ]
      },
      "get": {
        "operationId": "TagController_findAll",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de etiquetas.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateTagDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Proyecto no encontrado."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obtiene todas las etiquetas de un proyecto",
        "tags": [
          "Tags"
        ]
      }
    },
    "/api/projects/{projectId}/tags/{tagId}": {
      "get": {
        "operationId": "TagController_findOne",
        "parameters": [
          {
            "name": "tagId",
            "required": true,
            "in": "path",
            "description": "ID único de la etiqueta (CUID)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Etiqueta encontrada.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTagDto"
                }
              }
            }
          },
          "404": {
            "description": "Proyecto o Etiqueta no encontrada."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obtiene una etiqueta por su ID dentro de un proyecto",
        "tags": [
          "Tags"
        ]
      },
      "patch": {
        "operationId": "TagController_update",
        "parameters": [
          {
            "name": "tagId",
            "required": true,
            "in": "path",
            "description": "ID único de la etiqueta a actualizar (CUID)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTagDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Etiqueta actualizada.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTagDto"
                }
              }
            }
          },
          "400": {
            "description": "Datos inválidos."
          },
          "404": {
            "description": "Proyecto o Etiqueta no encontrada."
          },
          "409": {
            "description": "Conflicto, ya existe una etiqueta con el nuevo nombre en el proyecto."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Actualiza una etiqueta existente en un proyecto",
        "tags": [
          "Tags"
        ]
      },
      "delete": {
        "operationId": "TagController_remove",
        "parameters": [
          {
            "name": "tagId",
            "required": true,
            "in": "path",
            "description": "ID único de la etiqueta a eliminar (CUID)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Etiqueta eliminada.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTagDto"
                }
              }
            }
          },
          "404": {
            "description": "Proyecto o Etiqueta no encontrada."
          },
          "409": {
            "description": "Conflicto, la etiqueta está en uso."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Elimina una etiqueta de un proyecto",
        "tags": [
          "Tags"
        ]
      }
    },
    "/api/projects/{projectId}/tags/by-name/{name}": {
      "get": {
        "operationId": "TagController_findByName",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "description": "Nombre único de la etiqueta en el proyecto",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "ID del proyecto",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Etiqueta encontrada.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTagDto"
                }
              }
            }
          },
          "404": {
            "description": "Proyecto o Etiqueta no encontrada."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obtiene una etiqueta por su nombre dentro de un proyecto",
        "tags": [
          "Tags"
        ]
      }
    },
    "/api/projects/{projectId}/prompts/{promptId}/versions/{versionTag}": {
      "get": {
        "operationId": "PromptVersionController_findOneByTag",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "Prompt CUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version tag (e.g., v1.0.0)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Version found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptVersionDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Prompt, or Version not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a specific prompt version by its tag within a project/prompt",
        "tags": [
          "Prompt Versions (within Project/Prompt)"
        ]
      },
      "patch": {
        "operationId": "PromptVersionController_update",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "Prompt CUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version tag to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromptVersionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Version updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptVersionDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Prompt, or Version not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a specific prompt version by its tag within a project/prompt",
        "tags": [
          "Prompt Versions (within Project/Prompt)"
        ]
      },
      "delete": {
        "operationId": "PromptVersionController_remove",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "Prompt CUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version tag to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Version deleted."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Prompt, or Version not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a specific prompt version by its tag within a project/prompt",
        "tags": [
          "Prompt Versions (within Project/Prompt)"
        ]
      }
    },
    "/api/projects/{projectId}/prompts/{promptId}/versions/{versionTag}/translations": {
      "post": {
        "operationId": "PromptTranslationController_create",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "Prompt CUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version Tag",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePromptTranslationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Translation created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptTranslationDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data (e.g., missing languageCode)."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Prompt, or Version not found."
          },
          "409": {
            "description": "Translation for this language already exists for this version."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a translation for a specific prompt version within a project",
        "tags": [
          "Prompt Translations (within Project/Prompt/Version)"
        ]
      },
      "get": {
        "operationId": "PromptTranslationController_findAll",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "Prompt CUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version Tag",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of translations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreatePromptTranslationDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Prompt, or Version not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all translations for a specific prompt version within a project",
        "tags": [
          "Prompt Translations (within Project/Prompt/Version)"
        ]
      }
    },
    "/api/projects/{projectId}/prompts/{promptId}/versions/{versionTag}/translations/{languageCode}": {
      "get": {
        "operationId": "PromptTranslationController_findOneByLanguage",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "Prompt CUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version Tag",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languageCode",
            "required": true,
            "in": "path",
            "description": "Language code (e.g., es-ES)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Translation found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptTranslationDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Prompt, Version, or Translation not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a specific translation by language code for a prompt version",
        "tags": [
          "Prompt Translations (within Project/Prompt/Version)"
        ]
      },
      "patch": {
        "operationId": "PromptTranslationController_update",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "Prompt CUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version Tag",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languageCode",
            "required": true,
            "in": "path",
            "description": "Language code of the translation to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromptTranslationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Translation updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptTranslationDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Prompt, Version, or Translation not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a specific translation by language code for a prompt version",
        "tags": [
          "Prompt Translations (within Project/Prompt/Version)"
        ]
      },
      "delete": {
        "operationId": "PromptTranslationController_remove",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "description": "Prompt CUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version Tag",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languageCode",
            "required": true,
            "in": "path",
            "description": "Language code of the translation to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Translation deleted."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Prompt, Version, or Translation not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a specific translation by language code for a prompt version",
        "tags": [
          "Prompt Translations (within Project/Prompt/Version)"
        ]
      }
    },
    "/api/projects/{projectId}/assets/{assetKey}/versions": {
      "post": {
        "operationId": "PromptAssetVersionController_create",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Asset Key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePromptAssetVersionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Version created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptAssetVersionDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data (e.g., duplicate versionTag)."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project or Asset not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new version for a specific asset within a project",
        "tags": [
          "Prompt Asset Versions (within Project/Asset)"
        ]
      },
      "get": {
        "operationId": "PromptAssetVersionController_findAll",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Asset Key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of versions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreatePromptAssetVersionDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project or Asset not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all versions for a specific asset within a project",
        "tags": [
          "Prompt Asset Versions (within Project/Asset)"
        ]
      }
    },
    "/api/projects/{projectId}/assets/{assetKey}/versions/{versionTag}": {
      "get": {
        "operationId": "PromptAssetVersionController_findOneByTag",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Asset Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version tag (e.g., v1.0.0)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Version found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptAssetVersionDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Asset, or Version not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a specific asset version by its tag within a project/asset",
        "tags": [
          "Prompt Asset Versions (within Project/Asset)"
        ]
      },
      "patch": {
        "operationId": "PromptAssetVersionController_update",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Asset Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version tag to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromptAssetVersionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Version updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptAssetVersionDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Asset, or Version not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a specific asset version by its tag within a project/asset",
        "tags": [
          "Prompt Asset Versions (within Project/Asset)"
        ]
      },
      "delete": {
        "operationId": "PromptAssetVersionController_remove",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Asset Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version tag to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Version deleted."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Asset, or Version not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a specific asset version by its tag within a project/asset",
        "tags": [
          "Prompt Asset Versions (within Project/Asset)"
        ]
      }
    },
    "/api/projects/{projectId}/assets/{assetKey}/versions/{versionTag}/translations": {
      "post": {
        "operationId": "AssetTranslationController_create",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Asset Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version Tag",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssetTranslationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Translation created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAssetTranslationDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Asset, or Version not found."
          },
          "409": {
            "description": "Translation for this language already exists for this version."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a translation for a specific asset version within a project",
        "tags": [
          "Asset Translations (within Project/Asset/Version)"
        ]
      },
      "get": {
        "operationId": "AssetTranslationController_findAll",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Asset Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version Tag",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of translations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateAssetTranslationDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Asset, or Version not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all translations for a specific asset version within a project",
        "tags": [
          "Asset Translations (within Project/Asset/Version)"
        ]
      }
    },
    "/api/projects/{projectId}/assets/{assetKey}/versions/{versionTag}/translations/{languageCode}": {
      "get": {
        "operationId": "AssetTranslationController_findOneByLanguage",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Asset Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version Tag",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languageCode",
            "required": true,
            "in": "path",
            "description": "Language code (e.g., es-ES)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Translation found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAssetTranslationDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Asset, Version, or Translation not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a specific translation by language code for an asset version",
        "tags": [
          "Asset Translations (within Project/Asset/Version)"
        ]
      },
      "patch": {
        "operationId": "AssetTranslationController_update",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Asset Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version Tag",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languageCode",
            "required": true,
            "in": "path",
            "description": "Language code of the translation to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssetTranslationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Translation updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAssetTranslationDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Asset, Version, or Translation not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a specific translation by language code for an asset version",
        "tags": [
          "Asset Translations (within Project/Asset/Version)"
        ]
      },
      "delete": {
        "operationId": "AssetTranslationController_remove",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetKey",
            "required": true,
            "in": "path",
            "description": "Asset Key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionTag",
            "required": true,
            "in": "path",
            "description": "Version Tag",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languageCode",
            "required": true,
            "in": "path",
            "description": "Language code of the translation to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Translation deleted."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden Access to Project."
          },
          "404": {
            "description": "Project, Asset, Version, or Translation not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a specific translation by language code for an asset version",
        "tags": [
          "Asset Translations (within Project/Asset/Version)"
        ]
      }
    },
    "/api/projects/{projectId}/environments": {
      "post": {
        "operationId": "EnvironmentController_create",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEnvironmentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Environment created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEnvironmentDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "404": {
            "description": "Project not found."
          },
          "409": {
            "description": "Conflict, an environment with this name already exists in the project."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Creates a new environment for a project",
        "tags": [
          "Environments"
        ]
      },
      "get": {
        "operationId": "EnvironmentController_findAll",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of environments.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateEnvironmentDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Gets all environments for a project",
        "tags": [
          "Environments"
        ]
      }
    },
    "/api/projects/{projectId}/environments/{environmentId}": {
      "get": {
        "operationId": "EnvironmentController_findOne",
        "parameters": [
          {
            "name": "environmentId",
            "required": true,
            "in": "path",
            "description": "Unique environment ID (CUID)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Environment found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEnvironmentDto"
                }
              }
            }
          },
          "404": {
            "description": "Project or Environment not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Gets an environment by its ID within a project",
        "tags": [
          "Environments"
        ]
      },
      "patch": {
        "operationId": "EnvironmentController_update",
        "parameters": [
          {
            "name": "environmentId",
            "required": true,
            "in": "path",
            "description": "Unique ID of the environment to update (CUID)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEnvironmentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Environment updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEnvironmentDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "404": {
            "description": "Project or Environment not found."
          },
          "409": {
            "description": "Conflict, an environment with the new name already exists in the project."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Updates an existing environment in a project",
        "tags": [
          "Environments"
        ]
      },
      "delete": {
        "operationId": "EnvironmentController_remove",
        "parameters": [
          {
            "name": "environmentId",
            "required": true,
            "in": "path",
            "description": "Unique ID of the environment to delete (CUID)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Environment deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEnvironmentDto"
                }
              }
            }
          },
          "404": {
            "description": "Project or Environment not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Deletes an environment from a project",
        "tags": [
          "Environments"
        ]
      }
    },
    "/api/projects/{projectId}/environments/by-name/{name}": {
      "get": {
        "operationId": "EnvironmentController_findByName",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "description": "Unique environment name in the project",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "description": "Project ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Environment found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEnvironmentDto"
                }
              }
            }
          },
          "404": {
            "description": "Project or Environment not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Gets an environment by its name within a project",
        "tags": [
          "Environments"
        ]
      }
    },
    "/llm-execution/execute": {
      "post": {
        "operationId": "LlmExecutionController_executeLlm",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecuteLlmDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "LLM execution successful",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "result": "LLM response text",
                    "modelUsed": "gpt-4o",
                    "providerUsed": "openai"
                  }
                }
              }
            }
          },
          "201": {
            "description": ""
          },
          "400": {
            "description": "Invalid request body or unsupported provider."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "AI Model not found."
          },
          "500": {
            "description": "Internal server error (API Key config, LLM call failed, etc.)."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Executes a pre-assembled prompt using a specified AI Model via LangChain",
        "tags": [
          "LLM Execution"
        ]
      }
    },
    "/api/system-prompts": {
      "post": {
        "operationId": "SystemPromptController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSystemPromptDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "System prompt created successfully."
          },
          "400": {
            "description": "Invalid input data."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "Conflict: Name already exists."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new system prompt (Admin Only - conceptually)",
        "tags": [
          "System Prompts"
        ]
      },
      "get": {
        "operationId": "SystemPromptController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of system prompts."
          },
          "401": {
            "description": "Unauthorized."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all system prompts",
        "tags": [
          "System Prompts"
        ]
      }
    },
    "/api/system-prompts/{name}": {
      "get": {
        "operationId": "SystemPromptController_findOne",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "description": "Unique name of the system prompt",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "System prompt details."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "System prompt not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a specific system prompt by name",
        "tags": [
          "System Prompts"
        ]
      },
      "patch": {
        "operationId": "SystemPromptController_update",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "description": "Unique name of the system prompt to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSystemPromptDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "System prompt updated successfully."
          },
          "400": {
            "description": "Invalid input data."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "System prompt not found or conflict with new name."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update an existing system prompt (Admin Only - conceptually)",
        "tags": [
          "System Prompts"
        ]
      },
      "delete": {
        "operationId": "SystemPromptController_remove",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "description": "Unique name of the system prompt to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "System prompt deleted successfully."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "System prompt not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a system prompt (Admin Only - conceptually)",
        "tags": [
          "System Prompts"
        ]
      }
    }
  },
  "info": {
    "title": "JAPM API",
    "description": "API for the JAPM Prompt Engineering application",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http",
        "name": "JWT",
        "description": "Enter JWT token",
        "in": "header"
      }
    },
    "schemas": {
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "User's name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com",
            "description": "Unique user email"
          },
          "password": {
            "type": "string",
            "minLength": 6,
            "example": "password123",
            "description": "User's password"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {}
      },
      "RegisterDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email address",
            "example": "test@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "description": "User password",
            "example": "Password123!"
          },
          "name": {
            "type": "string",
            "maxLength": 100,
            "description": "User full name",
            "example": "Test User"
          }
        },
        "required": [
          "email",
          "password",
          "name"
        ]
      },
      "UserProfileResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "email",
          "name",
          "createdAt"
        ]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email address",
            "example": "test@example.com"
          },
          "password": {
            "type": "string",
            "description": "User password",
            "example": "Password123!"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          }
        },
        "required": [
          "access_token"
        ]
      },
      "CreateRegionDto": {
        "type": "object",
        "properties": {
          "languageCode": {
            "type": "string",
            "minLength": 5,
            "maxLength": 5,
            "description": "Unique language code acting as ID",
            "example": "de-DE"
          },
          "name": {
            "type": "string",
            "description": "Name of the region",
            "example": "Germany"
          },
          "parentRegionId": {
            "type": "string",
            "description": "languageCode of the parent region (optional)",
            "example": "eu"
          },
          "timeZone": {
            "type": "string",
            "description": "Time zone",
            "example": "Europe/Berlin"
          },
          "defaultFormalityLevel": {
            "type": "string",
            "description": "Default formality level (optional)",
            "example": "Formal"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes (optional)"
          }
        },
        "required": [
          "languageCode",
          "name"
        ]
      },
      "UpdateRegionDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the region",
            "example": "Germany"
          },
          "parentRegionId": {
            "type": "string",
            "description": "languageCode of the parent region (optional)",
            "example": "eu"
          },
          "timeZone": {
            "type": "string",
            "description": "Time zone",
            "example": "Europe/Berlin"
          },
          "defaultFormalityLevel": {
            "type": "string",
            "description": "Default formality level (optional)",
            "example": "Formal"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes (optional)"
          }
        }
      },
      "CreateCulturalDataDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID for this cultural data (slug format)",
            "example": "direct-and-formal"
          },
          "regionId": {
            "type": "string",
            "minLength": 5,
            "maxLength": 5,
            "description": "Associated region ID (xx-XX language code)",
            "example": "es-ES"
          },
          "formalityLevel": {
            "type": "number",
            "description": "Formality level (optional)",
            "example": 5
          },
          "style": {
            "type": "string",
            "description": "Communication style (optional)",
            "example": "Direct"
          },
          "considerations": {
            "type": "string",
            "description": "Cultural considerations (optional)"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes (optional)"
          }
        },
        "required": [
          "id",
          "regionId"
        ]
      },
      "CulturalDataResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID for this cultural data (slug format)",
            "example": "direct-and-formal"
          },
          "regionId": {
            "type": "string",
            "minLength": 5,
            "maxLength": 5,
            "description": "Associated region ID (xx-XX language code)",
            "example": "es-ES"
          },
          "formalityLevel": {
            "type": "number",
            "description": "Formality level (optional)",
            "example": 5
          },
          "style": {
            "type": "string",
            "description": "Communication style (optional)",
            "example": "Direct"
          },
          "considerations": {
            "type": "string",
            "description": "Cultural considerations (optional)"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes (optional)"
          },
          "region": {
            "$ref": "#/components/schemas/CreateRegionDto"
          },
          "projectId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "regionId",
          "region",
          "projectId"
        ]
      },
      "UpdateCulturalDataDto": {
        "type": "object",
        "properties": {
          "formalityLevel": {
            "type": "number",
            "description": "Formality level (optional)",
            "example": 5
          },
          "style": {
            "type": "string",
            "description": "Communication style (optional)",
            "example": "Direct"
          },
          "considerations": {
            "type": "string",
            "description": "Cultural considerations (optional)"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes (optional)"
          }
        }
      },
      "InitialTranslationDto": {
        "type": "object",
        "properties": {
          "languageCode": {
            "type": "string",
            "minLength": 2,
            "maxLength": 10,
            "description": "ISO language code (e.g., es, en)"
          },
          "promptText": {
            "type": "string",
            "description": "Translated prompt text"
          }
        },
        "required": [
          "languageCode",
          "promptText"
        ]
      },
      "CreatePromptDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "pattern": "/^[a-z0-9_]+$/",
            "description": "Unique prompt name (used as ID)",
            "example": "customer_welcome_greeting"
          },
          "description": {
            "type": "string",
            "description": "Description of the prompt's purpose.",
            "example": "Initial prompt to greet a customer."
          },
          "tags": {
            "uniqueItems": true,
            "description": "List of tag names to associate.",
            "example": [
              "welcome",
              "general"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "promptText": {
            "type": "string",
            "description": "Base prompt text for the first version (v1.0.0)",
            "example": "Hello {{customer_name}}, welcome."
          },
          "initialTranslations": {
            "description": "Optional initial translations for the first version",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InitialTranslationDto"
            }
          }
        },
        "required": [
          "name",
          "promptText"
        ]
      },
      "UpdatePromptDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "New description of the prompt's purpose.",
            "example": "Updated prompt for greetings."
          },
          "tagIds": {
            "description": "Complete list of Tag IDs to associate (replaces existing ones). Empty array to remove all.",
            "example": [
              "cma...uuid1",
              "cma...uuid2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AssetVersionLinkDto": {
        "type": "object",
        "properties": {
          "assetVersionId": {
            "type": "string",
            "description": "ID of the PromptAssetVersion to link."
          },
          "usageContext": {
            "type": "string",
            "description": "Usage context (optional)."
          },
          "position": {
            "type": "number",
            "description": "Position/order (optional)."
          }
        },
        "required": [
          "assetVersionId"
        ]
      },
      "CreatePromptVersionDto": {
        "type": "object",
        "properties": {
          "promptText": {
            "type": "string",
            "description": "BASE prompt text for this new version."
          },
          "versionTag": {
            "type": "string",
            "description": "Unique tag for this version within the prompt (e.g., v1.1.0, beta-feature-x).",
            "example": "v1.1.0"
          },
          "changeMessage": {
            "type": "string",
            "description": "Message describing the changes in this version."
          },
          "assetLinks": {
            "description": "List of asset versions to link to this prompt version.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetVersionLinkDto"
            }
          },
          "initialTranslations": {
            "description": "Optional initial translations for this new version.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InitialTranslationDto"
            }
          }
        },
        "required": [
          "promptText",
          "versionTag",
          "assetLinks"
        ]
      },
      "CreateOrUpdatePromptTranslationDto": {
        "type": "object",
        "properties": {
          "languageCode": {
            "type": "string",
            "minLength": 2,
            "maxLength": 10,
            "description": "Language code for the translation (e.g., es-ES, fr-FR).",
            "example": "fr-FR"
          },
          "promptText": {
            "type": "string",
            "description": "Translated prompt text for this version and language."
          }
        },
        "required": [
          "languageCode",
          "promptText"
        ]
      },
      "CreatePromptAssetDto": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Clave única identificadora del asset (e.g., saludo_formal_es)",
            "example": "saludo_formal_es"
          },
          "name": {
            "type": "string",
            "description": "Nombre descriptivo del asset",
            "example": "Saludo Formal (España)"
          },
          "type": {
            "type": "string",
            "description": "Tipo de asset (e.g., texto, json, lista)",
            "example": "texto"
          },
          "description": {
            "type": "string",
            "description": "Descripción más detallada del propósito del asset"
          },
          "category": {
            "type": "string",
            "description": "Categoría para organizar assets (e.g., Saludos, Despedidas)",
            "example": "Saludos"
          },
          "initialValue": {
            "type": "string",
            "description": "Valor inicial del asset para la primera versión (v1.0.0)"
          },
          "initialChangeMessage": {
            "type": "string",
            "description": "Mensaje de cambio para la primera versión"
          },
          "projectId": {
            "type": "string",
            "minLength": 25,
            "maxLength": 25,
            "description": "ID opcional del proyecto al que pertenece el asset"
          }
        },
        "required": [
          "key",
          "name",
          "initialValue"
        ]
      },
      "UpdatePromptAssetDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Nombre descriptivo del asset",
            "example": "Saludo Formal (España)"
          },
          "type": {
            "type": "string",
            "description": "Tipo de asset (e.g., texto, json, lista)",
            "example": "texto"
          },
          "description": {
            "type": "string",
            "description": "Descripción más detallada del propósito del asset"
          },
          "category": {
            "type": "string",
            "description": "Categoría para organizar assets (e.g., Saludos, Despedidas)",
            "example": "Saludos"
          },
          "enabled": {
            "type": "boolean",
            "description": "Activa o desactiva el asset"
          },
          "projectId": {
            "type": "string",
            "nullable": true,
            "minLength": 25,
            "maxLength": 25,
            "description": "ID opcional del proyecto al que pertenece el asset (null para desvincular)"
          }
        }
      },
      "CreatePromptAssetLinkDto": {
        "type": "object",
        "properties": {
          "promptVersionId": {
            "type": "string",
            "format": "uuid",
            "description": "ID de la PromptVersion a la que se vincula el asset."
          },
          "assetVersionId": {
            "type": "string",
            "format": "uuid",
            "description": "ID de la PromptAssetVersion que se vincula."
          },
          "usageContext": {
            "type": "string",
            "description": "Contexto de uso o propósito de este asset en el prompt.",
            "example": "Nombre del producto"
          },
          "position": {
            "type": "number",
            "minimum": 0,
            "description": "Orden posicional del asset dentro del prompt (si aplica).",
            "example": 1
          },
          "insertionLogic": {
            "type": "string",
            "description": "Lógica de inserción condicional (formato a definir).",
            "example": "variable_exists:user_name"
          },
          "isRequired": {
            "type": "boolean",
            "description": "Indica si el asset es requerido para el prompt (default: true)."
          }
        },
        "required": [
          "promptVersionId",
          "assetVersionId"
        ]
      },
      "UpdatePromptAssetLinkDto": {
        "type": "object",
        "properties": {
          "usageContext": {
            "type": "string",
            "description": "Contexto de uso o propósito de este asset en el prompt.",
            "example": "Nombre del producto"
          },
          "position": {
            "type": "number",
            "minimum": 0,
            "description": "Orden posicional del asset dentro del prompt (si aplica).",
            "example": 1
          },
          "insertionLogic": {
            "type": "string",
            "description": "Lógica de inserción condicional (formato a definir).",
            "example": "variable_exists:user_name"
          },
          "isRequired": {
            "type": "boolean",
            "description": "Indica si el asset es requerido para el prompt (default: true)."
          }
        }
      },
      "CreateRagDocumentMetadataDto": {
        "type": "object",
        "properties": {
          "regionId": {
            "type": "string",
            "format": "uuid",
            "description": "ID de la región asociada (opcional)"
          },
          "documentName": {
            "type": "string",
            "description": "Nombre del documento RAG",
            "example": "policy_update_q1_2024.pdf"
          },
          "category": {
            "type": "string",
            "description": "Categoría (opcional)",
            "example": "Compliance"
          },
          "complianceReviewed": {
            "type": "boolean",
            "description": "Indica si ha sido revisado por compliance",
            "default": false
          },
          "piiRiskLevel": {
            "type": "string",
            "description": "Nivel de riesgo PII (Información Personal Identificable) (opcional)",
            "example": "Low"
          },
          "lastReviewedBy": {
            "type": "string",
            "description": "Identificador de quién lo revisó por última vez (opcional)",
            "example": "user_cuid_123"
          }
        },
        "required": [
          "documentName"
        ]
      },
      "RagDocumentMetadataResponse": {
        "type": "object",
        "properties": {
          "regionId": {
            "type": "string",
            "format": "uuid",
            "description": "ID de la región asociada (opcional)"
          },
          "documentName": {
            "type": "string",
            "description": "Nombre del documento RAG",
            "example": "policy_update_q1_2024.pdf"
          },
          "category": {
            "type": "string",
            "description": "Categoría (opcional)",
            "example": "Compliance"
          },
          "complianceReviewed": {
            "type": "boolean",
            "description": "Indica si ha sido revisado por compliance",
            "default": false
          },
          "piiRiskLevel": {
            "type": "string",
            "description": "Nivel de riesgo PII (Información Personal Identificable) (opcional)",
            "example": "Low"
          },
          "lastReviewedBy": {
            "type": "string",
            "description": "Identificador de quién lo revisó por última vez (opcional)",
            "example": "user_cuid_123"
          },
          "region": {
            "$ref": "#/components/schemas/CreateRegionDto"
          },
          "id": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          }
        },
        "required": [
          "documentName",
          "id",
          "projectId"
        ]
      },
      "UpdateRagDocumentMetadataDto": {
        "type": "object",
        "properties": {}
      },
      "ExecutePromptBodyDto": {
        "type": "object",
        "properties": {
          "variables": {
            "type": "object"
          }
        },
        "required": [
          "variables"
        ]
      },
      "CreateProjectDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the project",
            "example": "My Awesome Project"
          },
          "description": {
            "type": "string",
            "description": "Optional description for the project",
            "example": "A project to demonstrate NestJS and Prisma"
          },
          "ownerUserId": {
            "type": "string",
            "description": "Optional ID of the User who owns this project",
            "example": "cl..."
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateProjectDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the project",
            "example": "My Awesome Project"
          },
          "description": {
            "type": "string",
            "description": "Optional description for the project",
            "example": "A project to demonstrate NestJS and Prisma"
          },
          "ownerUserId": {
            "type": "string",
            "description": "Optional ID of the User who owns this project",
            "example": "cl..."
          }
        }
      },
      "CreateAiModelDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique name for the AI model",
            "example": "gpt-4-turbo-2024-04-09"
          },
          "provider": {
            "type": "string",
            "description": "Provider of the AI model",
            "example": "OpenAI"
          },
          "description": {
            "type": "string",
            "description": "Optional description for the AI model"
          },
          "apiIdentifier": {
            "type": "string",
            "description": "Identifier used for API calls",
            "example": "openai/gpt-4-turbo"
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateAiModelDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique name for the AI model",
            "example": "gpt-4-turbo-2024-04-09"
          },
          "provider": {
            "type": "string",
            "description": "Provider of the AI model",
            "example": "OpenAI"
          },
          "description": {
            "type": "string",
            "description": "Optional description for the AI model"
          },
          "apiIdentifier": {
            "type": "string",
            "description": "Identifier used for API calls",
            "example": "openai/gpt-4-turbo"
          }
        }
      },
      "CreateTagDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "Nombre único de la etiqueta",
            "example": "customer-feedback"
          },
          "description": {
            "type": "string",
            "description": "Descripción opcional de la etiqueta",
            "example": "Etiquetas relacionadas con comentarios de clientes."
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateTagDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "Nuevo nombre único de la etiqueta (opcional)",
            "example": "user-feedback"
          },
          "description": {
            "type": "string",
            "description": "Nueva descripción opcional de la etiqueta",
            "example": "Comentarios generales de los usuarios."
          }
        }
      },
      "UpdatePromptVersionDto": {
        "type": "object",
        "properties": {
          "promptText": {
            "type": "string",
            "description": "BASE prompt text for this new version."
          },
          "changeMessage": {
            "type": "string",
            "description": "Message describing the changes in this version."
          },
          "assetLinks": {
            "description": "List of asset versions to link to this prompt version.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetVersionLinkDto"
            }
          },
          "initialTranslations": {
            "description": "Optional initial translations for this new version.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InitialTranslationDto"
            }
          }
        }
      },
      "CreatePromptTranslationDto": {
        "type": "object",
        "properties": {
          "versionId": {
            "type": "string",
            "description": "ID de la versión del prompt a la que pertenece esta traducción",
            "example": "cl...........cuid"
          },
          "languageCode": {
            "type": "string",
            "minLength": 5,
            "maxLength": 5,
            "description": "Código de idioma para esta traducción (formato xx-XX)",
            "example": "es-ES"
          },
          "promptText": {
            "type": "string",
            "description": "Texto del prompt traducido a este idioma"
          }
        },
        "required": [
          "versionId",
          "languageCode",
          "promptText"
        ]
      },
      "UpdatePromptTranslationDto": {
        "type": "object",
        "properties": {
          "promptText": {
            "type": "string",
            "description": "Texto del prompt traducido a este idioma"
          }
        }
      },
      "CreatePromptAssetVersionDto": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string",
            "description": "Key (slug) del asset lógico al que pertenece esta versión",
            "example": "saludo-inicial"
          },
          "value": {
            "type": "string",
            "description": "El valor del asset para esta versión"
          },
          "versionTag": {
            "type": "string",
            "default": "v1.0.0",
            "description": "Etiqueta de versión (e.g., v1.0.0). Debe ser única por asset.",
            "example": "v1.0.0"
          },
          "changeMessage": {
            "type": "string",
            "description": "Mensaje describiendo los cambios en esta versión."
          }
        },
        "required": [
          "assetId",
          "value"
        ]
      },
      "UpdatePromptAssetVersionDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Nuevo valor/contenido del asset para esta versión.",
            "example": "¡Hola Mundo Corregido!"
          },
          "changeMessage": {
            "type": "string",
            "description": "Nuevo mensaje describiendo los cambios.",
            "example": "Corrección de error tipográfico."
          }
        }
      },
      "CreateAssetTranslationDto": {
        "type": "object",
        "properties": {
          "versionId": {
            "type": "string",
            "description": "ID de la versión del asset a la que pertenece esta traducción",
            "example": "cl...........cuid"
          },
          "languageCode": {
            "type": "string",
            "minLength": 5,
            "maxLength": 5,
            "description": "Código de idioma para esta traducción (formato xx-XX)",
            "example": "es-ES"
          },
          "value": {
            "type": "string",
            "description": "Valor del asset traducido a este idioma"
          }
        },
        "required": [
          "versionId",
          "languageCode",
          "value"
        ]
      },
      "UpdateAssetTranslationDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Valor del asset traducido a este idioma"
          }
        }
      },
      "CreateEnvironmentDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "Unique name of the environment",
            "example": "production"
          },
          "description": {
            "type": "string",
            "description": "Optional description of the environment",
            "example": "Main production environment"
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateEnvironmentDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "New unique name for the environment (optional)",
            "example": "staging"
          },
          "description": {
            "type": "string",
            "description": "New optional description for the environment",
            "example": "Pre-production testing environment"
          }
        }
      },
      "ExecuteLlmDto": {
        "type": "object",
        "properties": {
          "modelId": {
            "type": "string",
            "description": "ID del AIModel a utilizar (de la tabla AIModel)",
            "example": "clxyz..."
          },
          "promptText": {
            "type": "string",
            "description": "El texto completo del prompt ya procesado y listo para enviar al LLM",
            "example": "Traduce este texto a español: Hello world."
          },
          "variables": {
            "type": "object",
            "description": "Variables originales usadas para ensamblar el prompt (opcional, para logging/contexto)",
            "example": {
              "cliente": "ACME Corp"
            }
          }
        },
        "required": [
          "modelId",
          "promptText"
        ]
      },
      "CreateSystemPromptDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "description": "Unique name/identifier for the system prompt",
            "example": "summarize_meeting_notes"
          },
          "description": {
            "type": "string",
            "maxLength": 500,
            "description": "Optional description of the prompt's purpose",
            "example": "Summarizes long meeting transcripts into key points."
          },
          "promptText": {
            "type": "string",
            "description": "The actual text content of the system prompt",
            "example": "Summarize the following text into bullet points..."
          },
          "category": {
            "type": "string",
            "maxLength": 50,
            "description": "Optional category for grouping prompts",
            "example": "summarization"
          }
        },
        "required": [
          "name",
          "promptText"
        ]
      },
      "UpdateSystemPromptDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "description": "Unique name/identifier for the system prompt",
            "example": "summarize_meeting_notes"
          },
          "description": {
            "type": "string",
            "maxLength": 500,
            "description": "Optional description of the prompt's purpose",
            "example": "Summarizes long meeting transcripts into key points."
          },
          "promptText": {
            "type": "string",
            "description": "The actual text content of the system prompt",
            "example": "Summarize the following text into bullet points..."
          },
          "category": {
            "type": "string",
            "maxLength": 50,
            "description": "Optional category for grouping prompts",
            "example": "summarization"
          }
        }
      }
    }
  }
}